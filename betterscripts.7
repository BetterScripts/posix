.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "betterscripts" "7" "" "BetterScripts" "BetterScripts POSIX Suite."
.hy
.SS BETTERSCRIPTS POSIX SUITE
.PP
An ever growing suite of libraries which aim to make portable scripting
easier, safer, and more efficient written for scripts written for
\[lq]command interpretation services and common utility programs\[rq] as
defined in the \[lq]Shell and
Utilities\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/idx/xcu.html)
volume of the
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
standard.
.SS DESCRIPTION
.PP
The suite libraries provide commands that enable commonly undertaken
tasks to be accomplished more easily, while maintaining maximum
portability, by providing more advanced features on top of the
\f[I]POSIX.1\f[R] standard, and providing workarounds for environments
or utilities which can cause problems.
.PP
To the extent possible, every library in the suite is self-contained and
has no dependencies outside the library except for a compatible
\f[I]POSIX.1\f[R] environment.
.PP
While some libraries may provide for being directly executed (i.e.\ as
indistinguishable from a binary command), most libraries are intended to
be
\[lq]sourced\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/V3_chap02.html#dot)
into any script where the library commands will then be available.
.SS LIBRARIES
.PP
   *   *   *   *   *
.PP
\f[V]libarray.sh\f[R]
.IP \[bu] 2
Emulated arrays for any shell.
.PP
   *   *   *   *   *
.PP
\f[V]libgetargs.sh\f[R]
.IP \[bu] 2
Argument processing made easy - like \f[V]getopt\f[R] or
\f[V]getopts\f[R] but much more powerful, while requiring less work.
.PP
   *   *   *   *   *
.PP
\f[V]getarg\f[R]
.IP \[bu] 2
Wrapper for \f[V]libgetargs.sh\f[R] which allows invoking without
needing to be sourced.
.PP
   *   *   *   *   *
.SS ENVIRONMENT
.PP
Several variables affect the libraries, some of these should be set to
specific values for the suite to work as intended[1], while others
determine suite settings.
.SS SHELL CONFIGURATION
.PP
All libraries assume the \f[I]POSIX.1\f[R] defined default environment
is in effect.
.PP
\f[B]Much of the \f[BI]POSIX.1\f[B] standard is \f[BI]only\f[B] defined
for this environment.\f[R]
.SS \f[V]LC_ALL\f[R]
.IP \[bu] 2
Should be set to \f[V]C\f[R] or the equivalent \f[V]POSIX\f[R].
(Other values \f[I]may\f[R] work, but are \f[I]not\f[R] supported.)
.IP \[bu] 2
Standards compliant shells and utilities will give \f[V]LC_ALL\f[R]
precedence over other locale setting variables, however these additional
locale variables may be (incorrectly) used in some cases and so may also
need set.
The standard also defines \f[V]LANG\f[R], \f[V]LC_COLLATE\f[R],
\f[V]LC_CTYPE\f[R], \f[V]LC_MESSAGES\f[R], \f[V]LC_MONETARY\f[R],
\f[V]LC_NUMERIC\f[R], and \f[V]LC_TIME\f[R], with some platforms
extending this further still.
.IP \[bu] 2
Note that setting the locale to \f[V]C\f[R] or \f[V]POSIX\f[R] does
\f[I]not\f[R] preclude using not in the locale, but \f[I]may\f[R] affect
how those characters are interpreted.
.PP
   *   *   *   *   *
.SS \f[V]IFS\f[R]
.IP \[bu] 2
Should be the standard defined default of \f[V]\[rs]t\[rs]n\f[R]
(\f[V]<space><tab><newline>\f[R]).
.IP \[bu] 2
A number of shell operations are defined with reference to the value
contained in \f[V]IFS\f[R], making it a powerful tool, but also a source
of many frustrations.
While the libraries in \f[I]the Suite\f[R] attempt to avoid any
dependence on the value of \f[V]IFS\f[R], it is near impossible to
ensure this is actually the case as the effects of \f[V]IFS\f[R] are
often somewhat hidden and can be easy to miss.
.IP \[bu] 2
Although much better supported in modern environments, traditionally the
use of \f[V]IFS\f[R] was highly implementation dependent.
Less mainstream environments may still retain quirks that make it
difficult to use \f[V]IFS\f[R] portably.
.PP
   *   *   *   *   *
.SS \f[V]POSIXLY_CORRECT\f[R]
.IP \[bu] 2
\f[I]MUST\f[R] be set if any GNU tools are to be used.
.IP \[bu] 2
A non-standard environment variable used primarily by GNU provided
tools (https://www.gnu.org/prep/standards/html_node/Non_002dGNU-Standards.html),
but may have been adopted by others.
Tells these commands to more closely match the standard than they
otherwise would.
.IP \[bu] 2
Many GNU tools significantly deviate from the standard unless this is
set (regardless of the current locale) - without this set it is highly
likely that many errors will occur.
.PP
   *   *   *   *   *
.SS LIBRARY CONFIGURATION
.PP
A number of environment variables affect the functionality of each of
the libraries.
These include both variables that instruct the library to work-around
specific platform issues, and variables that convey user preferences.
(See also the information on compatibility.)
.PP
Where it is possible, platform specific issues are detected
automatically, with the associated variables providing a way to force
enabling or disabling specific work-arounds if necessary.
\f[I]Automatic detection should always be preferred\f[R] - this detects
use cases that are actually problematic and not more general issues.
.PP
Each configuration variable belongs to a specific \f[I]CLASS\f[R]:
.IP \[bu] 2
\f[I]CONSTANT\f[R] - a configuration option that is read \f[I]only
once\f[R] when the library is first sourced and must not be set after
this point (the \f[V]readonly\f[R] command may be used to enforce this).
.IP \[bu] 2
\f[I]VARIABLE\f[R] - a configuration option that can be modified at any
point and \f[I]may\f[R] affect the next command.
.PP
Additionally, each configuration variable has to a specific
\f[I]TYPE\f[R]:
.IP \[bu] 2
\f[I]TEXT\f[R] - has a value that is arbitrary text with constraints
defined by each specific variable.
.IP \[bu] 2
\f[I]FLAG\f[R] - enables or disables specific functionality.
The value \f[V]0\f[R] (\f[V]<zero>\f[R]) turns a flag \f[I]OFF\f[R],
while \f[B]\f[BI]any\f[B]\f[R] other text will turn a flag \f[I]ON\f[R],
EXCEPT for flags where automatic detection is applicable where the value
\f[V]A\f[R] is special and forces the use of automatic detection.
\f[I]A flag that is unset\f[R] \f[B]or\f[R] \f[I]set but null
(i.e.\ empty) will use an appropriate default value.\f[R]
.PP
Configuration variables are never modified by a library.
.PP
Many configuration variables can be set for all libraries with a single,
suite wide variable.
Where such a suite wide variable is available a library specific
variable is always available in addition and has precedence.
(Not all libraries use all suite wide settings.)
.PP
Suite wide variables include:
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_QUIET_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
[Enable]/Disable library error message output.
.IP \[bu] 2
\f[I]OFF\f[R]: error messages will be written to \f[V]STDERR\f[R] as:
\f[V][<IDENTIFIER>]: ERROR: <MESSAGE>\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: library error messages will be suppressed.
.IP \[bu] 2
Each library also stores the most recent error message in a library
specific variable, which is unaffected by this flag.
.IP \[bu] 2
Unless otherwise stated, both the library versions of this option and
the suite version can be modified between command invocations and should
affect the next command.
.IP \[bu] 2
Does not affect errors from non-library commands, which \f[I]may\f[R]
still produce output.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_FATAL_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Enable/[Disable] causing library errors to terminate the current
(sub-)shell.
.IP \[bu] 2
\f[I]OFF\f[R]: errors stop any further processing, and cause a non-zero
exit status, but do not cause an exception.
.IP \[bu] 2
\f[I]ON\f[R]: any library error will cause an \[lq]unset variable\[rq]
shell exception using the
\f[V]${parameter:?[word]}\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/V3_chap02.html#tag_18_06_02)
parameter expansion, where \f[V]word\f[R] is set to an error message
that \f[I]should\f[R] be displayed by the shell (this message is NOT
suppressed by \f[V]BETTER_SCRIPTS_CONFIG_QUIET_ERRORS\f[R]).
.IP \[bu] 2
Unless otherwise stated, both the library versions of this option and
the suite version can be modified between command invocations and should
affect the next command.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_MULTIDIGIT_PARAMETER\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using only single digit shell parameters,
i.e.\ \f[V]$0\f[R] to \f[V]$9\f[R].
.IP \[bu] 2
\f[I]OFF\f[R]: Use multi-digit shell parameters.
.IP \[bu] 2
\f[I]ON\f[R]: Use only single-digit shell parameters.
.IP \[bu] 2
Multi-digit parameters are faster but may not be supported by all
implementations.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_SHIFT_N\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using only \f[V]shift\f[R] and not \f[V]shift N\f[R]
for multiple parameters.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]shift N\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: Use only \f[V]shift\f[R].
.IP \[bu] 2
Multi-parameter \f[V]shift\f[R] is faster but may not be supported by
all implementations
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_DEV_NULL\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using alternatives to \f[V]/dev/null\f[R] as a
redirection source/target (e.g.\ for output suppression).
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]/dev/null\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: Use an alternative to \f[V]/dev/null\f[R].
.IP \[bu] 2
Using \f[V]/dev/null\f[R] as a redirection target is a common idiom, but
not always possible (e.g.
restricted shells generally forbid this), the alternative is to capture
output (and ignore it) but this is much slower as it involves a
subshell.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_EXPR_BRE_MATCH\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using alternatives to \f[V]expr\f[R] for matching a
\[lq]Basic Regular Expression
(\f[I]BRE\f[R])\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/basedefs/V1_chap09.html#tag_09_03).
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]expr\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: Use an alternative command (i.e.\ \f[V]sed\f[R]).
.IP \[bu] 2
\f[V]expr\f[R] is much faster if it works correctly, but some
implementations make that difficult, while \f[V]sed\f[R] is more robust
for this use case.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_EXPR_EXIT_STATUS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable ignoring \f[V]expr\f[R] exit status to indicate a match
was made.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]expr\f[R] exit status to determine if a match
was made.
.IP \[bu] 2
\f[I]ON\f[R]: Use a workaround to determine if a match was made.
(This requires a sub-shell and is therefore far slower.)
.IP \[bu] 2
Some versions of \f[V]expr\f[R] do not always properly set the exit
status, making it impossible to determine if a match was actually made.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_EXPR_NESTED_CAPTURES\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
Disable/[Enable] using \f[V]expr\f[R] for any \[lq]Basic Regular
Expression\[rq]
(\f[I]BRE\f[R]) (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/basedefs/V1_chap09.html#tag_09_03)
that includes nested captures.
.IP \[bu] 2
When set, any \f[I]BRE\f[R] that uses nested captures will not be used
with \f[V]expr\f[R], but will use a case specific work-around.
.IP \[bu] 2
Some versions of \f[V]expr\f[R] do not work well with or do not support
nested captures.
.PP
   *   *   *   *   *
.SS \f[V]BETTER_SCRIPTS_CONFIG_NO_Z_SHELL_SETOPT\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using \f[V]setopt\f[R] in \f[I]Z Shell\f[R] to ensure
\f[I]POSIX.1\f[R] like behavior.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]setopt\f[R] to set the appropriate options.
.IP \[bu] 2
\f[I]ON\f[R]: Don\[cq]t use \f[V]setopt\f[R], even in \f[I]Z Shell\f[R].
.IP \[bu] 2
Automatically enabled if \f[I]Z Shell\f[R] is detected.
.IP \[bu] 2
Any use of \f[V]setopt\f[R] is scoped as tightly as possible and should
not affect other commands.
.IP \[bu] 2
If \f[I]Z Shell\f[R] is used and the current environment has already
been set to be \f[I]POSIX.1\f[R] compliant, forcing this \f[I]ON\f[R]
may improve performance.
.IP \[bu] 2
\f[I]Z Shell\f[R] has some defaults that cause non-standard behavior,
however also provides \f[V]setopt\f[R] which can be tightly scoped to
set options when required without impacting other platforms.[2]
.PP
   *   *   *   *   *
.SS LIBRARY INFORMATION
.PP
Each library provides a number of variables that are set by the library
to convey information outside of command invocation.
.PP
These variables must not be set by external commands except if this is
\f[I]explicitly\f[R] permitted.
Variables may use the \f[V]readonly\f[R] command to enforce this.
.PP
Along with any library only information variables, every library also
provides a version of some standard variables:
.SS \f[V]BS_<LIBRARY>_VERSION_MAJOR\f[R]
.IP \[bu] 2
A whole number >= 1.
.IP \[bu] 2
Incremented when there are significant changes, or any changes break
compatibility with previous library versions.
.IP \[bu] 2
Follows Semantic Versioning v2.0.0 (https://semver.org/).
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_VERSION_MINOR\f[R]
.IP \[bu] 2
A whole number >= 0.
.IP \[bu] 2
Incremented for significant changes that do not break compatibility with
previous versions.
.IP \[bu] 2
Reset to 0 when \f[V]BS_<LIBRARY>_VERSION_MAJOR\f[R] changes.
.IP \[bu] 2
Follows Semantic Versioning v2.0.0 (https://semver.org/).
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_VERSION_PATCH\f[R]
.IP \[bu] 2
A whole number >= 0.
.IP \[bu] 2
Incremented for minor revisions or bugfixes.
.IP \[bu] 2
Reset to 0 when \f[V]BS_<LIBRARY>_VERSION_MINOR\f[R] changes.
.IP \[bu] 2
Follows Semantic Versioning v2.0.0 (https://semver.org/).
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_VERSION_RELEASE\f[R]
.IP \[bu] 2
A string indicating a pre-release version.
.IP \[bu] 2
Always null for full-release versions.
.IP \[bu] 2
Possible values include \f[V]alpha\f[R], \f[V]beta\f[R], \f[V]rc\f[R],
etc, (a numerical suffix may also be appended).
.IP \[bu] 2
Follows Semantic Versioning v2.0.0 (https://semver.org/).
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_VERSION_FULL\f[R]
.IP \[bu] 2
Full (numerical) version combining \f[V]BS_<LIBRARY>_VERSION_MAJOR\f[R],
\f[V]BS_<LIBRARY>_VERSION_MINOR\f[R], and
\f[V]BS_<LIBRARY>_VERSION_PATCH\f[R] as a single value.
.IP \[bu] 2
Can be used in numerical comparisons.
.IP \[bu] 2
Format is \f[V]MNNNPPP\f[R] where, \f[V]M\f[R] is the \f[V]MAJOR\f[R]
version, \f[V]NNN\f[R] is the \f[V]MINOR\f[R] version (3 digit, zero
padded), and \f[V]PPP\f[R] is the \f[V]PATCH\f[R] version (3 digit, zero
padded).
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_VERSION\f[R]
.IP \[bu] 2
Full version combining \f[V]BS_<LIBRARY>_VERSION_MAJOR\f[R],
\f[V]BS_<LIBRARY>_VERSION_MINOR\f[R],
\f[V]BS_<LIBRARY>_VERSION_PATCH\f[R], and
\f[V]BS_<LIBRARY>_VERSION_RELEASE\f[R] as a formatted string.
.IP \[bu] 2
Format is
\f[V]BetterScripts \[aq]<library>\[aq] vMAJOR.MINOR.PATCH[-RELEASE]\f[R].
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_LAST_ERROR\f[R]
.IP \[bu] 2
Stores the error message of the \f[I]most recent\f[R] library error.
.IP \[bu] 2
ONLY valid immediately following a command from the appropriate library
for which the exit status is not a success code.
.IP \[bu] 2
Valid even when error output is suppressed.
.PP
   *   *   *   *   *
.SS \f[V]BS_<LIBRARY>_SOURCED\f[R]
.IP \[bu] 2
Set (and non-null) once the library has been sourced.
.IP \[bu] 2
Dependant scripts can query if this variable is set to determine if a
specific library has been sourced.
.IP \[bu] 2
Also serves as a guard to avoid errors caused by sourcing a library
multiple times.
.PP
   *   *   *   *   *
.SS ADDITIONAL VARIABLES
.SS \f[V]BETTER_SCRIPTS_PATH\f[R]
.IP \[bu] 2
Should be set to the location \f[I]the Suite\f[R] is installed.
.IP \[bu] 2
Multiple paths may be specified - formatted like the standard variable
\f[V]PATH\f[R].
.IP \[bu] 2
Useful for users if libraries are not installed in a location that is
available in \f[V]PATH\f[R].
.IP \[bu] 2
\f[I]Currently unused by libraries.\f[R]
.PP
   *   *   *   *   *
.SS STANDARDS
.IP \[bu] 2
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
.RS 2
.IP \[bu] 2
Also known as:
.RS 2
.IP \[bu] 2
\f[I]The Open Group Base Specifications Issue 7\f[R]
.IP \[bu] 2
\f[I]IEEE Std 1003.1-2008\f[R]
.IP \[bu] 2
\f[I]The Single UNIX Specification Version 4 (SUSv4)\f[R]
.RE
.IP \[bu] 2
The more recent
\f[I]POSIX.1-2017\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799)
is functionally identical to \f[I]POSIX.1-2008\f[R], but incorporates
some errata.
.RE
.IP \[bu] 2
FreeBSD SYSEXITS(3) (https://www.freebsd.org/cgi/man.cgi?sysexits(3))
.RS 2
.IP \[bu] 2
Although not a standard, the values specified by \f[I]SYSEXITS\f[R] are
widely used and are the only common exit codes generally available.
.IP \[bu] 2
Libraries use these values wherever possible, however other exit codes
may occur:
.RS 2
.IP \[bu] 2
Values returned by external commands are propagated where possible and
appropriate.
.IP \[bu] 2
As per \f[I]POSIX.1\f[R] the value \f[V]1\f[R] if used for
\f[V]false\f[R] for commands that require reporting a non-success,
non-error exit status.
.RE
.RE
.IP \[bu] 2
Semantic Versioning v2.0.0 (https://semver.org/)
.RS 2
.IP \[bu] 2
Each library has its own version number, each of which complies with
Semantic Versioning v2.0.0.
.IP \[bu] 2
Some libraries may provide version numbers for additional purposes,
these also follow Semantic Versioning v2.0.0, but may not include all
elements.
.RE
.IP \[bu] 2
Inclusive Naming Initiative (https://inclusivenaming.org/).
.SS NOTES
.SS INSTALLATION
.PP
The suite provided Makefile has targets that allow for installation of
both libraries and documentation in configurable locations (by default
libraries are installed in \f[V]/usr/local/bin\f[R], \f[V]Markdown\f[R]
documentation in \f[V]/usr/local/share/doc\f[R] and \f[V]man\f[R] page
documentation in the appropriate \f[V]/usr/local/share/man\f[R]
directory for the documentation category - note that these are not
\f[I]POSIX.1\f[R] specified).
.PP
Most of the suite libraries are intended to be sourced by other scripts
using the \f[V].\f[R] (aka dot)
command (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/V3_chap02.html#dot),
for which the standard says:
.RS
.PP
If file does not contain a <slash>, the shell shall use the search path
specified by PATH to find the directory containing file.
Unlike normal command search, however, the file searched for by the dot
utility need not be executable.
.RE
.PP
As such libraries are installed as non-executable unless direct
invocation is supported for a specific library.
.PP
More information about installation is available by invoking the
\f[V]help\f[R] target from the Makefile, i.e.\ \f[V]make help\f[R].
.SS DOCUMENTATION
.PP
Up-to-date versions of documentation for each library is always present
in the main \f[I]BetterScripts POSIX suite\f[R]
repository (https://github.com/BetterScripts/posix) in both
\f[V]Markdown\f[R] (https://daringfireball.net/projects/markdown/syntax)
and \f[V]man\f[R] page (https://wikipedia.org/wiki/Man_page) formats.
.PP
Much of this documentation is generated from other files within the
suite, with \f[V]Markdown\f[R] documentation for libraries being
generated from comments in the libraries themselves, while \f[V]man\f[R]
page documentation is generated from \f[V]Markdown\f[R] documentation
for both common and library documentation.
.PP
All \f[V]Markdown\f[R] documentation aims to be compatible with the
original
\f[V]Markdown\f[R] (https://daringfireball.net/projects/markdown/syntax)
specification, with reference to
\f[V]CommonMark\f[R] (https://commonmark.org/) to resolve any
ambiguities.
Although an extension to the original standard, footnotes are used
throughout the \f[V]Markdown\f[R] documentation as they are highly
useful, widely supported, and acceptably rendered by \f[V]Markdown\f[R]
flavors that do not support them.
.PP
Documentation can be regenerated using the suite provided Makefile.
.SS COMMAND DOCUMENTATION
.PP
Library commands document arguments with a tag indicating argument
usage:
.IP \[bu] 2
\f[I]in\f[R]: provides data \f[B]TO\f[R] the command.
.IP \[bu] 2
\f[I]out\f[R]: receives data \f[B]FROM\f[R] the command.
.IP \[bu] 2
\f[I]in/out\f[R]: provides data \f[B]TO\f[R] \f[B]AND\f[R] receives data
\f[B]FROM\f[R] the command.
.IP \[bu] 2
\f[I]ref\f[R]: an additional tag indicating the argument is passed by
\f[B]NAME\f[R] instead of \f[B]VALUE\f[R].
.RS 2
.IP \[bu] 2
For a typical \f[I]POSIX.1\f[R] variable this means omitting the
\f[V]$\f[R] from the name when passing it to the command, i.e.
instead of passing \f[V]$Variable\f[R] (or \f[V]${Variable}\f[R]) use
\f[V]Variable\f[R].
.IP \[bu] 2
Only \f[I]POSIX.1\f[R] compliant names are permitted.
Due to the security considerations of using \f[V]eval\f[R] with
arbitrary text \f[I]POSIX.1\f[R] names are enforced for all variable
names; providing a non-standard name will cause an error (even if the
name is supported by the current shell).
.IP \[bu] 2
Variables passed by name are GLOBAL variables.
The use of \f[V]local\f[R] variables (as supported by many shells) will
\f[B]not\f[R] work as expected.
(\f[I]POSIX.1\f[R] has no concept of \f[V]local\f[R] variables.)
.RE
.SS COMPATIBILITY
.PP
The \f[I]Better Scripts POSIX Suite\f[R] is supported in any environment
that is compatible with the \[lq]command interpretation services and
common utility programs\[rq] as defined in the \[lq]Shell and
Utilities\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/idx/xcu.html)
volume of the
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
standard.
.PP
\f[I]The number of environments that are at least partially POSIX.1
compliant is enormous - even if it were possible to test all of them,
access to many is difficult as they are tied to proprietary/specialist
systems.
Therefore, much of the compatibility work for the Suite is based on
resources such as \[lq]autoconf: Portable Shell
Programming\[rq] (https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/html_node/Portable-Shell.html)).
While such resources are incredibly useful, they often omit details such
as the specific platforms for which problems occur, or even dates for
when the problem was discovered or last seen.
The result is that it is highly likely some of the workarounds
implemented are unnecessary.\f[R][3]
.PP
Additionally:
.IP \[bu] 2
The \f[I]POSIX.1\f[R] standard has remained relative consistent between
versions (as relates to functionality required by \f[I]the Suite\f[R]),
although the
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
version of the standard is the reference version used for creating
\f[I]the Suite\f[R] it is likely that earlier versions will also be
supported.
.IP \[bu] 2
Non-compliant shells and utilities may be supported by specific
libraries, or specific commands within those libraries.
.IP \[bu] 2
A shell and/or utilities which are \f[I]not\f[R] supported \f[I]may\f[R]
still be able to make use of \f[I]the Suite\f[R] - any such tool is
termed \f[I]compatible\f[R].
The difference between shells and utilities which are
\f[I]supported\f[R] and those which are \f[I]compatible\f[R] is that any
erroneous behavior specific to the latter is not technically a bug and
unlikely to be addressed.
.IP \[bu] 2
Commands are designed to be \f[I]functionally equivalent\f[R] regardless
of the value of any of the standard specified shell options
(e.g.\ \f[V]errexit\f[R], \f[V]nounset\f[R], etc).
.IP \[bu] 2
Where a shell or utility is known to deviate from the functionality
required by a library a work-around may be provided \f[I]if\f[R] it is
relatively simple, performant, and can be scoped to only affect library
commands.
.IP \[bu] 2
Some common, but non-standard functionality is supported, for example,
\[lq]restricted\[rq] shells.
.IP \[bu] 2
Tests for suite libraries are provided along with a test harness in
which they are run.
These are not intended to determine platform support, but are primarily
for regression testing.
Additionally, the test harness, while \f[I]POSIX.1\f[R] compliant, may
require a more capable platform than that of individual libraries.
Still, if tests run successfully for a specific platform it is likely
the platform will be fully supported.
.SS PERFORMANCE
.IP \[bu] 2
Libraries have been written to maximize performance without sacrificing
configurability, safety or utility - with a general philosophy of
\[lq]you don\[cq]t pay for what you don\[cq]t use\[rq].
.IP \[bu] 2
For \f[I]most\f[R] use cases library performance should not be an issue
and will likely be far outweighed by other factors.[4]
.IP \[bu] 2
Where library performance \f[I]is\f[R] an issue, configuration of each
library can have a significant affect on performance.
Where configuration is known to affect performance, this is noted.
.IP \[bu] 2
The most significant factor in the performance of any library is the
specific external commands used by the library:
.RS 2
.IP \[bu] 2
The shell used is the single most significant factor, for example,
\f[V]bash\f[R] is highly user friendly and provides many advanced tools
beyond those required by the standard, however the much less well
specified \f[V]dash\f[R] performs significantly better for all suite
libraries.
.IP \[bu] 2
Utilities like \f[V]sed\f[R], \f[V]grep\f[R], \f[V]awk\f[R], etc.
are available in multiple implementations, each of which has it\[cq]s
own performance characteristics.
.RE
.SS CAVEATS
.PP
The tools and libraries in \f[I]the Suite\f[R] are subject to the
limitations imposed by the particular environment in which they are
invoked.
Each implementation of the required utilities and command execution
environment will have specific limitations that may be different to
those in another implementation and may change between versions of the
same utilities.[5]
.PP
For most use cases it is deemed unlikely that these limitations will be
an issue, however, there will be cases where some limitations may cause
problems.
.SS COMMAND LINE LENGTH LIMIT
.PP
It is impossible to determine all the possible limitations that may
exist or may be of issue (even when considering only those specified in
the standard).
However, of the known limitations, perhaps the most likely to be
encountered across multiple libraries from \f[I]the Suite\f[R] is the
command line length limit, which can be encountered in a number of
scenarios, and in unexpected ways.
.PP
The standard specifies this as
\f[V]{ARG_MAX}\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/functions/execl.html)
and defines it as:
.RS
.PP
The number of bytes available for [a] new process\[cq] combined argument
and environment lists\&...
It is implementation-defined whether null terminators, pointers, and/or
any alignment bytes are included in this total.
.RE
.PP
The value for any particular environment can be queried using the
command \f[V]getconf ARG_MAX\f[R], though this value can only be used as
a guide since it is impossible to know how many bytes any command will
require in advance.
For a modern system this value can be several million bytes, while older
systems it can be significantly less.
.PP
It \f[I]is\f[R] possible to increase the available command line length
for commands, by, for example, by:
.IP \[bu] 2
reducing the number (and size) of exported variables;
.IP \[bu] 2
avoiding characters that use more than a single byte.
.PP
Importantly, any variable which is exported and also has it\[cq]s
\f[I]contents\f[R] used as an argument to a command will count
\f[B]TWICE\f[R] towards this limit.
.PP
It is recommended that variables containing library data are
\f[I]not\f[R] exported.
.SS INTERNAL COMMANDS & VARIABLES
.PP
All libraries require a number of internal commands and variables to
provide the provided functionality, these are distinguishable from other
values by a prefix: commands these are prefixed with \f[V]fn_bs_\f[R];
while variables are prefixed with \f[V]g_BS_\f[R], \f[V]c_BS_\f[R], or
\f[V]i_BS\f[R].
.PP
These are \f[B]strictly\f[R] for internal usage and \f[B]must not\f[R]
be invoked or referenced outside the library to which they belong.
.SS SEE ALSO
.PP
getarg(1), libgetargs(7), libarray(7)
.SH NOTES
.SS [1]
.PP
While it would be possible to set some environment variables to the
required values when needed by a specific library (e.g.\ setting the
\f[V]POSIX\f[R] locale), this is not always easy to do while avoiding
changing the state for the invoker \f[I]and\f[R] maintaining
performance.
Setting all variables as part of a command might be possible in many
cases, but would require huge lines of code for each command, and
setting variables may not even be possible (e.g.\ standard variables may
be \f[V]readonly\f[R] in a restricted shell).
Finally, setting these variables to the expected value assumes that
other values do not work, which may not be true and may make some uses
of the libraries impossible without any real need.
.SS [2]
.PP
Technically since the default configuration of \f[I]Z Shell\f[R] is
non-standard it is not supported by the suite, however this work-around
is provided since it can be easily scoped, and does not notably affect
performance, and causes no issues with other environments.
Similar work-arounds for other environments are not always possible
(e.g.\ the GNU specific
\f[V]POSIXLY_CORRECT\f[R] (https://www.gnu.org/prep/standards/html_node/Non_002dGNU-Standards.html)
environment variable can not so easily be dealt with).
.SS [3]
.PP
Legacy systems and software can often be found in older organizations,
especially where the organizations (and hence the associated systems)
are somewhat specialized.
While many of these systems are no longer actively maintained by the
original manufactures, they continue to be used.
Even those systems that are still maintained may contain long obsolete
software.
For example, \f[I]Oracle Solaris 11.4\f[R] shipped in September 2023,
yet contains a version of \f[V]ksh88\f[R] (i.e.\ the 1988 version of
KornShell) - although this shell is largely similar to more modern
shells it does deviate somewhat, here it simply serves as an example of
how even maintained systems can continue to support very old software.
Where practicable, \f[I]the Suite\f[R] is intended to support all such
systems.
.SS [4]
.PP
Initially there was an alternative version of each library which
excluded as much of the main version as possible, while leaving most
functionality intact, with the intention being that these versions would
give the absolute best performance possible.
This plan was ultimately abandoned as the resulting gains were
surprisingly small despite the significant reduction in file sizes and
customization - most of the expensive computation is unavoidable.
.SS [5]
.PP
Many of these limitations are specified in the standard, with specific
constraints, though generally the actual value is \[lq]implementation
defined\[rq].
.SH AUTHORS
BetterScripts (better.scripts\[at]proton.me).
