.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "libdeque" "7" "" "BetterScripts" "Simple deque, queue, and stack emulation for POSIX.1 shells."
.hy
.SS libdeque
.SS SYNOPSIS
.PP
\f[I]Full synopsis, description, arguments, examples and other
information is documented with each individual command.\f[R]
.PP
   *   *   *   *   *
.PP
\f[V]deque\f[R] - \f[I]Double-Ended Queue\f[R]
.PP
\f[V]deque_push_front <DEQUE> <VALUE>...\f[R]
.PP
\f[V]deque_pop_front <DEQUE> [<OUTPUT>]\f[R]
.PP
\f[V]deque_unshift <DEQUE> <VALUE>...\f[R] \f[I](alias for
\f[VI]deque_push_front\f[I])\f[R]
.PP
\f[V]deque_shift <DEQUE> [<OUTPUT>]\f[R] \f[I](alias for
\f[VI]deque_pop_front\f[I])\f[R]
.PP
\f[V]deque_push_back <DEQUE> <VALUE>...\f[R]
.PP
\f[V]deque_pop_back <DEQUE> [<OUTPUT>]\f[R]
.PP
\f[V]deque_push <DEQUE> <VALUE>...\f[R] \f[I](alias for
\f[VI]deque_push_back\f[I])\f[R]
.PP
\f[V]deque_pop <DEQUE> [<OUTPUT>]\f[R] \f[I](alias for
\f[VI]deque_pop_back\f[I])\f[R]
.PP
\f[V]deque_peek_front <DEQUE> [<OUTPUT>]\f[R]
.PP
\f[V]deque_peek_back <DEQUE> [<OUTPUT>]\f[R]
.PP
\f[V]deque_front <DEQUE> [<OUTPUT>]\f[R] \f[I](alias for
\f[VI]deque_peek_front\f[I])\f[R]
.PP
\f[V]deque_back <DEQUE> [<OUTPUT>]\f[R] \f[I](alias for
\f[VI]deque_peek_back\f[I])\f[R]
.PP
\f[V]deque_size <DEQUE> [<OUTPUT>]\f[R]
.PP
\f[V]deque_is_deque_like <DEQUE>\f[R]
.PP
   *   *   *   *   *
.PP
\f[V]queue\f[R] - First In, First Out Queue._
.PP
\f[V]queue_push <QUEUE> <VALUE>...\f[R]
.PP
\f[V]queue_pop <QUEUE> [<OUTPUT>]\f[R]
.PP
\f[V]queue_peek <QUEUE> [<OUTPUT>]\f[R]
.PP
\f[V]queue_size <QUEUE> [<OUTPUT>]\f[R]
.PP
\f[V]queue_is_queue_like <QUEUE>\f[R]
.PP
   *   *   *   *   *
.PP
\f[V]stack\f[R] - Last In, First Out Stack._
.PP
\f[V]stack_push <STACK> <VALUE>...\f[R]
.PP
\f[V]stack_pop <STACK> [<OUTPUT>]\f[R]
.PP
\f[V]stack_peek <STACK> [<OUTPUT>]\f[R]
.PP
\f[V]stack_size <STACK> [<OUTPUT>]\f[R]
.PP
\f[V]stack_is_stack_like <STACK>\f[R]
.PP
   *   *   *   *   *
.SS DESCRIPTION
.PP
Provides commands to allow any \f[I]POSIX.1\f[R] compliant shell to use
a simple emulated queue like data structures:
.TP
\f[V]deque\f[R]
\f[I]Double-Ended\f[R] - access to elements at both ends of the deque.
\f[I]Sequential\f[R] - elements in the middle can not be accessed
directly.
.TP
\f[V]queue\f[R]
\f[I]Single-Ended\f[R] - access to elements at one end only.
\f[I]First In, First Out\f[R] - elements accessed in added order.
\f[I]Sequential\f[R] - elements in the middle can not be accessed
directly.
.TP
\f[V]stack\f[R]
\f[I]Single-Ended\f[R] - access to elements at one end only.
\f[I]Last In, First Out\f[R] - elements accessed in \f[I]reversed\f[R]
order.
\f[I]Sequential\f[R] - elements in the middle can not be accessed
directly.
.PP
These structures are highly efficient, with performance that should be
close to the maximum possible for any data that can be processed using
them.
All 3 types have identical performance characteristics.
.PP
For any operation requiring sequential access to a number of elements
these data types should be the first considered for use (before more
obvious types such as (emulated) arrays).
.PP
\f[I]The types \f[VI]queue\f[I] and \f[VI]stack\f[I] are specializations
of \f[VI]deque\f[I], so provided in the same library.\f[R]
.SS EXIT STATUS
.IP \[bu] 2
For all commands the exit status will be \f[V]0\f[R] (\f[V]<zero>\f[R])
if, and only if, the command was completed successfully.
.IP \[bu] 2
For any command which is intended to perform a test, an exit status of
\f[V]1\f[R] (\f[V]<one>\f[R]) indicates \[lq]false\[rq], while
\f[V]0\f[R] (\f[V]<zero>\f[R]) indicates \[lq]true\[rq].
.IP \[bu] 2
An exit status that is NOT \f[V]0\f[R] (\f[V]<zero>\f[R]) from an
external command will be propagated to the caller where relevant (and
possible).
.IP \[bu] 2
For any usage error (e.g.\ an unsupported variable name), the
\f[V]EX_USAGE\f[R] error code from FreeBSD
\f[V]SYSEXITS(3)\f[R] (https://www.freebsd.org/cgi/man.cgi?sysexits(3))
is used.
.IP \[bu] 2
Configuration SHOULD NOT change the value of any exit status.
.SS ENVIRONMENT
.PP
A number of environment variables affect the library, these are split
into variables that instruct the library to work-around specific
platform issues, and variables that convey user preferences.
Variables that enable platform specific work-arounds will be
automatically set if needed, but can also be set manually to force
specific configurations.
.PP
In additional to these, there are a number of variables that are set by
the library to convey information outside of command invocation.
.PP
If unset, some variables will take an initial value from a
\f[I]BetterScripts\f[R] \f[I]POSIX Suite\f[R] wide variable, these allow
the same configuration to be used by all libraries in the suite.
.PP
After the library has been sourced, external commands must not set
library environment variables that are classified as CONSTANT.
Variables may use the \f[V]readonly\f[R] command to enforce this.
.PP
\f[B]\f[BI]If not otherwise specified, an \f[VBI]<unset>\f[BI] variable
is equivalent to the\f[B]\f[R] \f[B]\f[BI]default value.\f[B]\f[R]
.PP
\f[I]For more details see the common suite documentation.\f[R]
.SS PLATFORM CONFIGURATION
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_CONFIG_NO_Z_SHELL_SETOPT\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_NO_Z_SHELL_SETOPT\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using \f[V]setopt\f[R] in \f[I]Z Shell\f[R] to ensure
\f[I]POSIX.1\f[R] like behavior.
.IP \[bu] 2
Automatically enabled if \f[I]Z Shell\f[R] is detected.
.IP \[bu] 2
Any use of \f[V]setopt\f[R] is scoped as tightly as possible and SHOULD
not affect other commands.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_CONFIG_NO_GREP_F\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_NO_GREP_F\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using the non-standard \f[V]fgrep\f[R] instead of
\f[V]grep -F\f[R].
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]grep -F\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: Use \f[V]fgrep\f[R].
.IP \[bu] 2
While \f[V]grep -F\f[R] is standard, it is not always available but in
the cases it is not \f[V]fgrep\f[R] often is and provides the required
functionality.
.SS USER PREFERENCE
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_CONFIG_QUIET_ERRORS\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_QUIET_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
[Enable]/Disable library error message output.
.IP \[bu] 2
\f[I]OFF\f[R]: error messages will be written to \f[V]STDERR\f[R] as:
\f[V][libdeque::<COMMAND>]: ERROR: <MESSAGE>\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: library error messages will be suppressed.
.IP \[bu] 2
The most recent error message is always available in
\f[V]BS_LIBDEQUE_LAST_ERROR\f[R] even when error output is suppressed.
.IP \[bu] 2
Both the library version of this option and the suite version can be
modified between command invocations and will affect the next command.
.IP \[bu] 2
Does NOT affect errors from non-library commands, which \f[I]may\f[R]
still produce output.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_CONFIG_FATAL_ERRORS\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_FATAL_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Enable/[Disable] causing library errors to terminate the current
(sub-)shell.
.IP \[bu] 2
\f[I]OFF\f[R]: errors stop any further processing, and cause a non-zero
exit status, but do not cause an exception.
.IP \[bu] 2
\f[I]ON\f[R]: any library error will cause an \[lq]unset variable\[rq]
shell exception using the
\f[V]${parameter:?[word]}\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/V3_chap02.html#tag_18_06_02)
parameter expansion, where \f[V]word\f[R] is set to an error message
that \f[I]should\f[R] be displayed by the shell (this message is NOT
suppressed by \f[V]BS_LIBDEQUE_CONFIG_QUIET_ERRORS\f[R]).
.IP \[bu] 2
Both the library version of this option and the suite version can be
modified between command invocations and will affect the next command.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_CONFIG_USE_SAFER_DEQUE\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Enable/[Disable] the use of an internal format for \f[V]deque\f[R],
\f[V]queue\f[R], and \f[V]stack\f[R] that is slightly safer.
.IP \[bu] 2
\f[I]OFF\f[R]: don\[cq]t use the safer format, but if any value added
contains text that matches the internal delimiters errors \f[I]will\f[R]
occur.
.IP \[bu] 2
\f[I]ON\f[R]: use the safer format, at the expense of some performance.
.IP \[bu] 2
The internal delimiters used to create the data structures that enable
\f[V]deque\f[R], \f[V]queue\f[R], and \f[V]stack\f[R] types have been
chosen to be highly unlikely to occur in any normal data, however it
remains possible that they could be present.
Setting this flag to \f[I]ON\f[R] causes every value added to be
modified such that it can no longer match the internal values, removing
a possible (though unlikely) source of errors.
Unfortunately this can result in lower performance, the extent of which
is largely dependent on the contents of the values added.
.IP \[bu] 2
This affects all three data types; there is no available mechanism for
applying this to a single type.
.IP \[bu] 2
Has a performance impact.
Prefer \f[B]\f[BI]OFF\f[B]\f[R] for performance.
.SS INFORMATIONAL
.PP
Variables that convey library information.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION_MAJOR\f[R]
.IP \[bu] 2
Integer >= 1.
.IP \[bu] 2
Incremented when there are significant changes, or any changes break
compatibility with previous versions.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION_MINOR\f[R]
.IP \[bu] 2
Integer >= 0.
.IP \[bu] 2
Incremented for significant changes that do not break compatibility with
previous versions.
.IP \[bu] 2
Reset to 0 when \f[V]BS_LIBDEQUE_VERSION_MAJOR\f[R] changes.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION_PATCH\f[R]
.IP \[bu] 2
Integer >= 0.
.IP \[bu] 2
Incremented for minor revisions or bugfixes.
.IP \[bu] 2
Reset to 0 when \f[V]BS_LIBDEQUE_VERSION_MINOR\f[R] changes.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION_RELEASE\f[R]
.IP \[bu] 2
A string indicating a pre-release version, always null for full-release
versions.
.IP \[bu] 2
Possible values include `alpha', `beta', `rc', etc, (a numerical suffix
may also be appended).
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION_FULL\f[R]
.IP \[bu] 2
Full version combining \f[V]BS_LIBDEQUE_VERSION_MAJOR\f[R],
\f[V]BS_LIBDEQUE_VERSION_MINOR\f[R], and
\f[V]BS_LIBDEQUE_VERSION_PATCH\f[R] as a single integer.
.IP \[bu] 2
Can be used in numerical comparisons
.IP \[bu] 2
Format: \f[V]MNNNPPP\f[R] where, \f[V]M\f[R] is the \f[V]MAJOR\f[R]
version, \f[V]NNN\f[R] is the \f[V]MINOR\f[R] version (3 digit, zero
padded), and \f[V]PPP\f[R] is the \f[V]PATCH\f[R] version (3 digit, zero
padded).
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_VERSION\f[R]
.IP \[bu] 2
Full version combining \f[V]BS_LIBDEQUE_VERSION_MAJOR\f[R],
\f[V]BS_LIBDEQUE_VERSION_MINOR\f[R],
\f[V]BS_LIBDEQUE_VERSION_PATCH\f[R], and
\f[V]BS_LIBDEQUE_VERSION_RELEASE\f[R] as a formatted string.
.IP \[bu] 2
Format:
\f[V]BetterScripts \[aq]libdeque\[aq] vMAJOR.MINOR.PATCH[-RELEASE]\f[R]
.IP \[bu] 2
Derived tools MUST include unique identifying information in this value
that differentiates them from the BetterScripts versions.
(This information should precede the version number.)
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_LAST_ERROR\f[R]
.IP \[bu] 2
Stores the error message of the most recent error.
.IP \[bu] 2
ONLY valid immediately following a command for which the exit status is
not \f[V]0\f[R] (\f[V]<zero>\f[R]).
.IP \[bu] 2
Available even when error output is suppressed.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBDEQUE_SOURCED\f[R]
.IP \[bu] 2
Set (and non-null) once the library has been sourced.
.IP \[bu] 2
Dependant scripts can query if this variable is set to determine if this
file has been sourced.
.SS COMMANDS
.SS DEQUE
.PP
   *   *   *   *   *
.SS \f[V]deque_push_back\f[R]
.PP
Add one or more values to the \f[I]back\f[R] of a deque.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_push_back <DEQUE> <VALUE>...
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [out:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty deque or \f[V]unset\f[R] variable (a new deque
will be created).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) deque is written to
\f[V]STDOUT\f[R].
.TP
\f[V]VALUE\f[R] [in]
Can contain any arbitrary text excluding any embedded \f[V]\[rs]0\f[R]
(\f[V]<NUL>\f[R]) characters.
Can be null.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
deque_push_back MyDeque \[dq]$\[at]\[dq]
\f[R]
.fi
.PP
   *   *   *   *   *
.SS \f[V]deque_pop_back\f[R]
.PP
Remove a value from the \f[I]back\f[R] of a deque.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_pop_back <DEQUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value is written to,
\f[V]STDOUT\f[R]
If not specified value is not written to any location.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
while deque_pop_back MyDeque MyVar
do
  ...
done
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]DEQUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]deque_push_front\f[R]
.PP
Add one or more values to the \f[I]front\f[R] of a deque.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_push_front <DEQUE> <VALUE>...
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [out:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty deque or \f[V]unset\f[R] variable (a new deque
will be created).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) deque is written to
\f[V]STDOUT\f[R].
.TP
\f[V]VALUE\f[R] [in]
Can contain any arbitrary text excluding any embedded \f[V]\[rs]0\f[R]
(\f[V]<NUL>\f[R]) characters.
Can be null.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
deque_push_front MyDeque \[dq]$\[at]\[dq]
\f[R]
.fi
.PP
   *   *   *   *   *
.SS \f[V]deque_pop_front\f[R]
.PP
Remove a value from the \f[I]front\f[R] of a deque.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_pop_front <DEQUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value is written to,
\f[V]STDOUT\f[R]
If not specified value is not written to any location.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
while deque_pop_front MyDeque MyVar
do
  ...
done
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]DEQUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]deque_push\f[R]
.PP
Alias for \f[V]deque_push_back\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_pop\f[R]
.PP
Alias for \f[V]deque_pop_back\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_unshift\f[R]
.PP
Alias for \f[V]deque_push_front\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_shift\f[R]
.PP
Alias for \f[V]deque_pop_front\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_peek_back\f[R]
.PP
Get the value from the \f[I]back\f[R] of a deque without removing it.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_peek_back <DEQUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
deque_peek_back \[aq]MyDeque\[aq] \[aq]MyVar\[aq]
MyVar=\[dq]$(deque_peek_back \[aq]MyDeque\[aq] )\[dq]
MyVar=\[dq]$(deque_peek_back \[aq]MyDeque\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]DEQUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]deque_peek_front\f[R]
.PP
Get the value from the \f[I]front\f[R] of a deque without removing it.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_peek_front <DEQUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
deque_peek_front \[aq]MyDeque\[aq] \[aq]MyVar\[aq]
MyVar=\[dq]$(deque_peek_front \[aq]MyDeque\[aq] )\[dq]
MyVar=\[dq]$(deque_peek_front \[aq]MyDeque\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]DEQUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]deque_back\f[R]
.PP
Alias for \f[V]deque_peek_back\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_front\f[R]
.PP
Alias for \f[V]deque_peek_front\f[R]
.PP
   *   *   *   *   *
.SS \f[V]deque_size\f[R]
.PP
Get the number of entries in a deque.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_size <DEQUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable that may contain a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty deque or \f[V]unset\f[R] variable.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the size.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
deque_size \[aq]MyDeque\[aq] \[aq]MySize\[aq]
MySize=\[dq]$(deque_size \[aq]MyDeque\[aq] )\[dq]
MySize=\[dq]$(deque_size \[aq]MyDeque\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
Though it is not likely to be noticeable in most use cases, this is a
relatively slow operation; it is advisable to not use this if avoidable,
particularly if performance is important.
.IP \[bu] 2
An empty \f[V]DEQUE\f[R] should always be represented by an empty
variable - (i.e.\ normal empty variable checks can be used to test for
this).
.PP
   *   *   *   *   *
.SS \f[V]deque_is_deque_like\f[R]
.PP
Determine if a variable looks like it contains deque like data.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
deque_is_deque_like <DEQUE>
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]DEQUE\f[R] [in:ref]
Variable that may contain a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
if deque_is_deque_like \[aq]Variable\[aq]; then ...; fi
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
The stack and queue types are specializations of a deque and have the
same internal format; it is \f[I]not\f[R] possible to differentiate
between the three types.
.IP \[bu] 2
An empty or unset \f[V]DEQUE\f[R] is \f[I]not\f[R] a valid deque.
.IP \[bu] 2
Exit status will be \f[V]0\f[R] (\f[V]<zero>\f[R]) if \f[V]DEQUE\f[R]
appears to be a valid stack, a queue, or deque while the exit status
will be \f[V]1\f[R] (\f[V]<one>\f[R]) in all other (non-error) cases.
.SS QUEUE
.PP
   *   *   *   *   *
.SS \f[V]queue_push\f[R]
.PP
Push one or more values onto a queue.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
queue_push <QUEUE> <VALUE>...
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]QUEUE\f[R] [out:ref]
Variable containing a queue.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty queue or \f[V]unset\f[R] variable (a new queue
will be created).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) queue is written to
\f[V]STDOUT\f[R].
.TP
\f[V]VALUE\f[R] [in]
Can contain any arbitrary text excluding any embedded \f[V]\[rs]0\f[R]
(\f[V]<NUL>\f[R]) characters.
Can be null.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
queue_push MyQueue \[dq]$\[at]\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
Each \f[V]VALUE\f[R] is pushed to the queue in turn, i.e.\ the
\f[I]first\f[R] \f[V]VALUE\f[R] specified will be the \f[I]first\f[R]
value popped from the resulting queue.
.PP
   *   *   *   *   *
.SS \f[V]queue_pop\f[R]
.PP
Remove a value from a queue.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
queue_pop <QUEUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]QUEUE\f[R] [in:ref]
Variable containing a deque.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value is written to,
\f[V]STDOUT\f[R]
If not specified value is not written to any location.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
while queue_pop MyQueue MyVar
do
  ...
done
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]QUEUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]queue_peek\f[R]
.PP
Get the next value from the queue without removing it.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
queue_peek <QUEUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]QUEUE\f[R] [in:ref]
Variable containing a queue.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
queue_peek \[aq]MyQueue\[aq] \[aq]MyVar\[aq]
MyVar=\[dq]$(queue_peek \[aq]MyQueue\[aq] )\[dq]
MyVar=\[dq]$(queue_peek \[aq]MyQueue\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]QUEUE\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]queue_size\f[R]
.PP
Get the number of entries in a queue.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
queue_size <QUEUE> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]QUEUE\f[R] [in:ref]
Variable that may contain a queue.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty queue or \f[V]unset\f[R] variable.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the size.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
queue_size \[aq]MyQueue\[aq] \[aq]MySize\[aq]
MySize=\[dq]$(queue_size \[aq]MyQueue\[aq] )\[dq]
MySize=\[dq]$(queue_size \[aq]MyQueue\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
Though it is not likely to be noticeable in most use cases, this is a
relatively slow operation; it is advisable to not use this if avoidable,
particularly if performance is important.
.IP \[bu] 2
An empty \f[V]QUEUE\f[R] should always be represented by an empty
variable - (i.e.\ normal empty variable checks can be used to test for
this).
.PP
   *   *   *   *   *
.SS \f[V]queue_is_queue_like\f[R]
.PP
Determine if a variable looks like it contains queue like data.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
queue_is_queue_like <QUEUE>
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]QUEUE\f[R] [in:ref]
Variable that may contain a queue.
MUST be a valid \f[I]POSIX.1\f[R] name.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
if queue_is_queue_like \[aq]Variable\[aq]; then ...; fi
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
A queue is a specialization of a deque and has the same internal format
as both a deque and a stack; it is \f[I]not\f[R] possible to
differentiate between the three types.
.IP \[bu] 2
An empty or unset \f[V]QUEUE\f[R] is \f[I]not\f[R] a valid queue.
.IP \[bu] 2
Exit status will be \f[V]0\f[R] (\f[V]<zero>\f[R]) if \f[V]QUEUE\f[R]
appears to be a valid stack, a queue, or deque while the exit status
will be \f[V]1\f[R] (\f[V]<one>\f[R]) in all other (non-error) cases.
.SS STACK
.PP
   *   *   *   *   *
.SS \f[V]stack_push\f[R]
.PP
Push one or more values onto a stack.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
stack_push <STACK> <VALUE>...
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]STACK\f[R] [out:ref]
Variable containing a stack.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty stack or \f[V]unset\f[R] variable (a new stack
will be created).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) stack is written to
\f[V]STDOUT\f[R].
.TP
\f[V]VALUE\f[R] [in]
Can contain any arbitrary text excluding any embedded \f[V]\[rs]0\f[R]
(\f[V]<NUL>\f[R]) characters.
Can be null.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
stack_push DirStack \[dq]$PWD\[dq]
cd \[aq]/tmp\[aq]
\&...
stack_pop DirStack OldDir
cd \[dq]$OldDir\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
Each \f[V]VALUE\f[R] is pushed to the stack in turn, i.e.\ the
\f[I]last\f[R] \f[V]VALUE\f[R] specified will be the \f[I]top\f[R] of
the resulting stack.
.PP
   *   *   *   *   *
.SS \f[V]stack_pop\f[R]
.PP
Remove the value from the top of a stack.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
stack_pop <STACK> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]STACK\f[R] [out:ref]
Variable containing a stack.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value is written to,
\f[V]STDOUT\f[R]
If not specified value is not written to any location.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
while stack_pop MyStack MyVar
do
  ...
done
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]STACK\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]stack_peek\f[R]
.PP
Get the value from the top of the stack without removing it.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
stack_peek <STACK> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]STACK\f[R] [in:ref]
Variable containing a stack.
MUST be a valid \f[I]POSIX.1\f[R] name.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the element value.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
stack_peek \[aq]MyStack\[aq] \[aq]MyVar\[aq]
MyVar=\[dq]$(stack_peek \[aq]MyStack\[aq] )\[dq]
MyVar=\[dq]$(stack_peek \[aq]MyStack\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
If \f[V]STACK\f[R] is empty the exit status will be \f[V]1\f[R]
(\f[V]<one>\f[R]).
.IP \[bu] 2
If value is output to \f[V]STDOUT\f[R] data \f[I]may\f[R] be lost if the
value ends with a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R])
(\f[I]POSIX.1\f[R] rules state that newlines should be removed from the
end of output generated by commands).
.PP
   *   *   *   *   *
.SS \f[V]stack_size\f[R]
.PP
Get the number of entries in a stack.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
stack_size <STACK> [<OUTPUT>]
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]STACK\f[R] [in:ref]
Variable that may contain a stack.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty stack or \f[V]unset\f[R] variable.
.TP
\f[V]OUTPUT\f[R] [out:ref]
Variable that will contain the size.
Any current contents will be lost.
MUST be a valid \f[I]POSIX.1\f[R] name or a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
If not specified, or specified as \f[V]-\f[R] (\f[V]<hyphen>\f[R]) value
is written to \f[V]STDOUT\f[R].
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
stack_size \[aq]MyStack\[aq] \[aq]MySize\[aq]
MySize=\[dq]$(stack_size \[aq]MyStack\[aq] )\[dq]
MySize=\[dq]$(stack_size \[aq]MyStack\[aq] -)\[dq]
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
Though it is not likely to be noticeable in most use cases, this is a
relatively slow operation; it is advisable to not use this if avoidable,
particularly if performance is important.
.IP \[bu] 2
An empty \f[V]STACK\f[R] should always be represented by an empty
variable - (i.e.\ normal empty variable checks can be used to test for
this).
.PP
   *   *   *   *   *
.SS \f[V]stack_is_stack_like\f[R]
.PP
Determine if a variable looks like it contains stack like data.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
stack_is_stack_like <STACK>
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]STACK\f[R] [in:ref]
Variable that may contain a stack.
MUST be a valid \f[I]POSIX.1\f[R] name.
.PP
\f[I]EXAMPLES\f[R]
.IP
.nf
\f[C]
if stack_is_stack_like \[aq]Variable\[aq]; then ...; fi
\f[R]
.fi
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
A stack is a specialization of a deque and has the same internal format
as both a deque and a queue; it is \f[I]not\f[R] possible to
differentiate between the three types.
.IP \[bu] 2
An empty or unset \f[V]STACK\f[R] is \f[I]not\f[R] a valid stack.
.IP \[bu] 2
Exit status will be \f[V]0\f[R] (\f[V]<zero>\f[R]) if \f[V]STACK\f[R]
appears to be a valid stack, a queue, or deque while the exit status
will be \f[V]1\f[R] (\f[V]<one>\f[R]) in all other (non-error) cases.
.SS STANDARDS
.IP \[bu] 2
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
.RS 2
.IP \[bu] 2
also known as:
.RS 2
.IP \[bu] 2
\f[I]The Open Group Base Specifications Issue 7\f[R]
.IP \[bu] 2
\f[I]IEEE Std 1003.1-2008\f[R]
.IP \[bu] 2
\f[I]The Single UNIX Specification Version 4 (SUSv4)\f[R]
.RE
.IP \[bu] 2
the more recent
\f[I]POSIX.1-2017\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799)
is functionally identical to \f[I]POSIX.1-2008\f[R], but incorporates
some errata
.RE
.IP \[bu] 2
FreeBSD SYSEXITS(3) (https://www.freebsd.org/cgi/man.cgi?sysexits(3))
.RS 2
.IP \[bu] 2
while not truly standard, these are used by many projects
.RE
.IP \[bu] 2
Semantic Versioning v2.0.0 (https://semver.org/)
.SS NOTES
.IP \[bu] 2
The data types \f[V]deque\f[R], \f[V]queue\f[R] and \f[V]stack\f[R] are
very efficient, and are likely the best choice for storing data where it
only needs accessed sequentially.
(This is probably true even for iterating over all values where it may
seem like converting to another format (e.g.\ an emulated array) would
be better).
.IP \[bu] 2
With the exception of commands dealing with size, \f[I]all\f[R] commands
are implemented entirely using shell builtins (i.e.\ require no external
utilities), making them very fast.
.IP \[bu] 2
Internally all queues or stacks are specializations of deque and use the
same data format; it is possible to use any of the commands with any of
the types regardless of which command was used for creation.
The different interfaces are provided so that specific use cases are
easier to write and understand.
For example, if emulating \f[V]pushd\f[R]/\f[V]popd\f[R] it makes more
sense to use a stack than a deque, and using a stack makes such use
easier to understand, even if the underlying type is the same.
.IP \[bu] 2
Modification of a deque, queue or stack outside of the library is
\f[I]not\f[R] supported.
.IP \[bu] 2
Argument validation occurs where possible and (relatively) performant
for all arguments to all commands.
.IP \[bu] 2
A deque, queue or stack can be serialized (e.g.\ saved to, or loaded
from, a file).
However, each deque is \f[I]only\f[R] supported by the library version
used to created it - the internal format for a deque \f[I]may\f[R]
change between versions without notice.
.IP \[bu] 2
While any data can be stored in the available formats, performance will
scale with the size of data stored (though the specifics will depend
upon the platform and environment).
.SS CAVEATS
.PP
\f[I]The internal structure of a \f[VI]deque\f[I], \f[VI]queue\f[I], or
\f[VI]stack\f[I] is subject to change without notice and should not be
relied upon.
In particular, currently all three types are interchangeable (e.g.\ a
\f[VI]stack\f[I] can be used with commands for a \f[VI]queue\f[I],
etc.), however, this should not be assumed: types should always be used
only with the commands for the specific type.\f[R]
.PP
The maximum size of any deque, queue or stack is limited by the
environment in which it is used, specifically they will not be able to
exceed the command line length limit, though other limitations may also
exist.
.PP
Note that exporting a variable containing any deque, queue or stack will
cause that variable to be counted against the command line length limit
\f[B]TWICE\f[R] (for any library operations).
.PP
\f[I]For more details see the common suite documentation.\f[R]
.SS EXAMPLE
.IP
.nf
\f[C]
g_DirectoryStack=;
pushd() {
   stack_push g_DirectoryStack \[dq]$PWD\[dq]
   cd \[dq]$1\[dq]
}
popd() {
   stack_pop g_DirectoryStack \[dq]PushedDirectory\[dq]
   cd \[dq]$PushedDirectory\[dq]
}
\f[R]
.fi
.PP
Note that emulation of \f[V]pushd\f[R]/\f[V]popd\f[R] in this way
requires ensuring \f[I]both\f[R] operations occur within the same
subshell, or it will not work as expected.
.SS SEE ALSO
.PP
betterscripts(7)
.SH AUTHORS
BetterScripts (better.scripts\[at]proton.me).
