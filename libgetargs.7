.\" Automatically generated by Pandoc 3.1.3
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "libgetargs" "7" "" "BetterScripts" "Argument processing for POSIX.1 shell scripts."
.hy
.SS LIBGETARGS
.SS SYNOPSIS
.IP
.nf
\f[C]
\&. libgetargs.sh
\&...
getargs <SPECIFICATION>... [--] <ARGUMENT>...
\f[R]
.fi
.SS DESCRIPTION
.PP
Command argument processing for scripts and script functions.
.PP
Parses all ARGUMENTs according to the configuration specified with
SPECIFICATION.
.PP
While generally similar in functionality to the \f[I]POSIX.1\f[R]
specified utility
\f[V]getopts\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/getopts.html)
or the \f[V]getopt\f[R] utility from
\f[V]util-linux\f[R] (https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/about/),
\f[V]getargs\f[R] provides greater functionality while also requiring
less code and being compatible with any \f[I]POSIX.1\f[R] compliant
environment.
.PP
Discussion of anything to do with command arguments is challenging as
the different people understand the same terms differently with some
terms used interchangeably depending on the situation, or with different
meanings in other contexts.
Terminology used here is based on the \f[I]POSIX.1\f[R] \[lq]Utility
Conventions\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/basedefs/V1_chap12.html),
with appropriate extensions where necessary.
A brief summary of key terms can be found in NOTES.
.PP
The utility \f[V]getarg\f[R] is a wrapper for \f[V]libgetargs.sh\f[R]
which provides the functionality of the library as a directly invocable
command (i.e.\ one that does not require the library be imported prior
to use).
.SS OPTIONS
.PP
\f[I]MAIN OPTIONS\f[R]
.TP
\f[V]-o <CONFIG>\f[R], \f[V]--options <CONFIG>\f[R]
\f[B]Required.\f[R]
\f[V]<CONFIG>\f[R] describes how OPTIONs are processed.
MAY be specified multiple times.
For more details see OPTION-CONFIG.
.TP
\f[V]-p <CONFIG>\f[R], \f[V]--positional <CONFIG>\f[R], \f[V]--operands <CONFIG>\f[R]
\f[V]<CONFIG>\f[R] describes how OPERANDs are processed.
MAY be specified multiple times.
For more details see OPERAND-CONFIG.
.PP
\f[I]MODE OPTIONS\f[R]
.TP
\f[V]--auto-help[=<VARIABLE>]\f[R]
Automatically process a \f[V]--help\f[R] or \f[V]-h\f[R]
\f[V]<ARGUMENT>\f[R].
If \f[V]--help\f[R] or \f[V]-h\f[R] is encountered, help text is
generated from \f[V]<SPECIFICATION>\f[R] and either stored in
\f[V]<VARIABLE>\f[R] (if it was provided) or written to \f[V]STDOUT\f[R]
(if it was not), processing then stops and an exit status of \f[V]1\f[R]
(\f[V]<one>\f[R]) is set.
For more details see AUTO-HELP.
.TP
\f[V]--script[=<VARIABLE>]\f[R]
Generate a script suitable for use with \f[V]eval\f[R] which will set
the variables from \f[V]<SPECIFICATION>\f[R] as would be set by
\f[V]getargs\f[R] when given the same input, the resulting script is
either stored in \f[V]<VARIABLE>\f[R] (if it was provided) or written to
\f[V]STDOUT\f[R] (if it was not).
For more details see SCRIPT.
.TP
\f[V]--validate[=<VALIDATOR>]\f[R], \f[V]-v[[=]<VALIDATOR>]\f[R]
Use \f[V]<VALIDATOR>\f[R] as a command to validate all OPTION-ARGUMENTs
and OPERANDs.
An error occurs if \f[V]<VALIDATOR>\f[R] has a non-zero exit status.
If \f[V]<VALIDATOR>\f[R] is not specified uses
\f[V]getargs_validate_option_value\f[R].
For more details see VALIDATOR.
.PP
\f[I]OTHER OPTIONS\f[R]
.TP
\f[V]--name <ID>\f[R], \f[V]-n[=]<ID>\f[R], \f[V]--id <ID>\f[R], \f[V]-i[=]<ID>\f[R]
Set an \f[V]<ID>\f[R] to use for error messages and with auto-help, if
not specified a default of \f[V]getargs\f[R] or \f[V]<command>\f[R] is
used respectively.
Does not effect if the value stored in
\f[V]BS_LIBGETARGS_LAST_ERROR\f[R].
.TP
\f[V]--version\f[R], \f[V]-V\f[R]
Write the library version number to \f[V]STDOUT\f[R] and exit.
.TP
\f[V]--help\f[R], \f[V]-h\f[R]
Display help text and exit.
\f[B]Only available with \f[VB]getarg\f[B].\f[R]
.PP
\f[I]PREFERENCE OPTIONS\f[R]
.PP
Preferences can be set by OPTION or by environment variables, (OPTIONs
take precedence).
Defaults for each option are highlighted, and the associated variable is
noted - more detailed information for each preference can be found with
these variables.
.TP
\f[V]--[no-]abbreviations\f[R]
[Enable]/Disable allowing LONG-OPTIONs to be abbreviated.
Overrides \f[V]BS_LIBGETARGS_CONFIG_ALLOW_ABBREVIATIONS\f[R].
.TP
\f[V]--[no-]ambiguous\f[R]
[Enable]/Disable detection of ambiguous OPTIONs.
Overrides \f[V]BS_LIBGETARGS_CONFIG_ALLOW_AMBIGUOUS\f[R]
.TP
\f[V]--[no-]check-config\f[R]
Enable/[Disable] performing basic checks on OPTION-CONFIG and
OPERAND-CONFIG before processing.
Overrides \f[V]BS_LIBGETARGS_CONFIG_CHECK_CONFIG\f[R]
.TP
\f[V]--[no-]fatal[-errors]\f[R]
Enable/[Disable] causing library errors to terminate the current
(sub-)shell.
Overrides \f[V]BS_LIBGETARGS_CONFIG_FATAL_ERRORS\f[R]
.TP
\f[V]--[no-]interleaved\f[R], \f[V]--[no-]mixed\f[R]
Enable/[Disable] matching OPTIONs after the first OPERAND is matched.
Overrides \f[V]BS_LIBGETARGS_CONFIG_INTERLEAVED_OPERANDS\f[R].
Can not be used with \f[V]--strict\f[R].
.TP
\f[V]--[no-]posix-long\f[R]
Enable/[Disable] matching LONG-OPTIONs with a single preceding
\f[V]-\f[R] (\f[V]<hyphen>\f[R]) character instead of the normally
required two.
Overrides \f[V]BS_LIBGETARGS_CONFIG_ALLOW_POSIX_LONG\f[R]
.TP
\f[V]--[no-]quiet[-error]\f[R]
[Enable]/Disable error message output.
Overrides \f[V]BS_LIBGETARGS_CONFIG_QUIET_ERRORS\f[R]
.TP
\f[V]--[no-]strict\f[R]
Enable/[Disable] requiring the use of \f[V]--\f[R]
(\f[V]<hyphen><hyphen>\f[R]) to separate OPTIONs from OPERANDs.
Overrides \f[V]BS_LIBGETARGS_CONFIG_STRICT_OPERANDS\f[R].
Can not be used with \f[V]--interleaved\f[R] or \f[V]--unmatched\f[R]
.TP
\f[V]--[no-]unsafe\f[R]
[Enable]/Disable escaping OPTIONs to avoid any erroneous results when
matching with regular expressions.
Overrides \f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNSAFE_OPTIONS\f[R]
.TP
\f[V]--[no-]unset\f[R]
Enable/[Disable] automatic unsetting of all variables named in
OPTION-CONFIG and OPERAND-CONFIG.
Overrides \f[V]BS_LIBGETARGS_CONFIG_AUTO_UNSET\f[R]
.TP
\f[V]--[no-]unmatched\f[R]
Enable/[Disable] matching an unrecognized OPTION as an OPERAND.
Overrides \f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNMATCHED\f[R].
Implies \f[V]--interleaved\f[R].
Can not be used with \f[V]--strict\f[R].
.PP
\f[I]NOTES\f[R]
.PP
Functionality can be invoked either by importing the
\f[V]libgetargs\f[R] \f[I]or\f[R] via the standalone wrapper script
\f[V]getarg\f[R].
When invoked as \f[V]getarg\f[R]:
.IP \[bu] 2
\f[V]--script\f[R] is implied (and can not be specified again).
.IP \[bu] 2
\f[V]--[no-]fatal[-errors]\f[R] is permitted, but is not useful.
.IP \[bu] 2
\f[V]--auto-help\f[R] works as intended, but the output can not be
stored in a variable[1].
.SS OPTION-CONFIG
.IP
.nf
\f[C]
<ALPHA>          = ? characters from the LC_CTYPE \[aq]alpha\[aq] class ? ;
<ALNUM>          = ? characters from the LC_CTYPE \[aq]alnum\[aq] class ? ;
<GRAPH>          = ? characters from the LC_CTYPE \[aq]graph\[aq] class ? ;
<NEWLINE>        = \[dq]\[rs]n\[dq]
<WHITESPACE>     = \[dq] \[dq] | \[dq]\[rs]t\[dq]

<NAME>           = <ALNUM>, { <ALNUM> | \[dq]_\[dq] | \[dq]-\[dq] } ;
<TYPE>           = \[dq]-\[dq] | \[dq]\[ti]\[dq] | \[dq]?\[dq] | \[dq]:\[dq] | \[dq];\[dq] | \[dq]+\[dq] ;
<VARIABLE>       = <ALPHA>, { <ALNUM> | \[dq]_\[dq] } ;
<OPTIONS>        = <NAME> { \[dq]|\[dq] <NAME> } \[dq][\[dq] <TYPE> \[dq]]\[dq] <VARIABLE>,
                   { \[dq],\[dq] <OPTIONS> } ;

<HELP>           = ( <GRAPH> | <WHITESPACE> ), { <HELP> }
<HELP-TEXT>      = { \[dq]#\[dq] <HELP> }
                   { <NEWLINE>, { <WHITESPACE> }, \[dq]#\[dq] <HELP> } ;

<OPERAND-CONFIG> = <OPTIONS>, [ <HELP-TEXT> ] ;
\f[R]
.fi
.PP
OPTION-CONFIG as specified with the the OPTION \f[V]--options\f[R], or
\f[V]-o\f[R], uses the above syntax.
The following rules then apply:
.IP \[bu] 2
if multiple OPTION-CONFIGs are specified, they are concatenated into a
single OPTION-CONFIG
.IP \[bu] 2
each \f[V]<NAME>\f[R] defines an OPTION-NAME
.IP \[bu] 2
each \f[V]<VARIABLE>\f[R] specifies a shell variable
.IP \[bu] 2
each \f[B]unique\f[R] \f[V]<VARIABLE>\f[R] defines a \f[I]single\f[R]
OPTION
.IP \[bu] 2
every \f[V]<NAME>\f[R] associated with a \f[V]<VARIABLE>\f[R] defines an
OPTION-ALIAS
.RS 2
.IP \[bu] 2
a \f[V]<VARIABLE>\f[R] specified in multiple OPTION-CONFIGs implies a
\f[I]single\f[R] OPTION that matches \f[I]all\f[R] the specified
OPTION-ALIASes
.RE
.IP \[bu] 2
an OPTION-ALIAS that is a single character defines a SHORT-OPTION-ALIAS
.IP \[bu] 2
an OPTION-ALIAS that is two or more characters defines a
LONG-OPTION-ALIAS
.IP \[bu] 2
the \f[V]<TYPE>\f[R] describes how an OPTION is processed:
.RS 2
.IP \[bu] 2
\f[B]\f[VB][-]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]incrementing SWITCH-OPTION\f[R]
.IP \[bu] 2
\f[I]MAY be specified multiple times\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]prohibited\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]a positive whole number\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of any OPTION-TAG, otherwise is incremented every
time \f[V]OPTION\f[R] is specified
.IP \[bu] 2
when no OPTION-TAG is used, \f[V]<VARIABLE>\f[R] holds a value
indicating how many times the OPTION was specified
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][\[ti]]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]negatable SWITCH-OPTION\f[R]
.IP \[bu] 2
\f[I]MAY be specified multiple times\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]prohibited\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]value of\f[R] \f[I]\f[VI]BS_LIBGETARGS_CONFIG_TRUE_VALUE\f[I]\f[R]
\f[I]or\f[R] \f[I]\f[VI]BS_LIBGETARGS_CONFIG_FALSE_VALUE\f[I]\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of any OPTION-TAG, otherwise the value of
\f[V]BS_LIBGETARGS_CONFIG_TRUE_VALUE\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][?]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]MUST be specified at most once\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]optional\f[R]
.IP \[bu] 2
\f[I]MUST be an AGGREGATE-OPTION-ARGUMENT\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]prohibited\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of any OPTION-ARGUMENT, or the value of
\f[V]BS_LIBGETARGS_CONFIG_OPTIONAL_VALUE\f[R] if no OPTION-ARGUMENT was
specified
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][:]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]MUST be specified at most once\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]required\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]prohibited\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of the OPTION-ARGUMENT
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][;]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]MAY be specified multiple times\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]required\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]prohibited\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of the \f[I]last\f[R] OPTION-ARGUMENT specified
.IP \[bu] 2
any previously specified OPTION-ARGUMENTs are discarded
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][+]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPTION:
.RS 2
.IP \[bu] 2
\f[I]MAY be specified multiple times\f[R]
.RE
.IP \[bu] 2
OPTION-ARGUMENT:
.RS 2
.IP \[bu] 2
\f[I]required\f[R]
.RE
.IP \[bu] 2
OPTION-TAG:
.RS 2
.IP \[bu] 2
\f[I]one of the values \f[VI]array\f[I], \f[VI]passthrough\f[I],
\f[VI]passthru\f[I], or \f[VI]forward\f[I]\f[R]
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of the all OPTION-ARGUMENT as an emulated array
.IP \[bu] 2
if one of the permitted OPTION-TAGs is specified, OPTION-ARGUMENT is an
emulated array the \f[I]contents\f[R] of which are appended
.RE
.RE
.RE
.IP \[bu] 2
\f[V]<HELP-TEXT>\f[R] can follow any OPTION-CONFIG:
.RS 2
.IP \[bu] 2
any text here is used to annotate options for auto-help, if enabled, or
as comments otherwise
.IP \[bu] 2
\f[V]<HELP-TEXT>\f[R] is always associated with a \f[I]single\f[R]
\f[V]<VARIABLE>\f[R]
.IP \[bu] 2
for more details see auto-help
.RE
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
OPTION-TAGs are designed to facilitate commands where OPTIONs are used
to invoke other commands without further processing, allowing them to be
\[lq]forwarded\[rq] safely and efficiently
.IP \[bu] 2
Any number of OPTION-ALIASes can be specified for a single OPTION
.RS 2
.IP \[bu] 2
only a LONG-OPTION-ALIAS can:
.RS 2
.IP \[bu] 2
be abbreviated (to a minimum of 2 characters)
.RE
.IP \[bu] 2
only a SHORT-OPTION-ALIAS can:
.RS 2
.IP \[bu] 2
be part of a COMPOUND-OPTION
.IP \[bu] 2
use an AGGREGATE-ARGUMENT without a delimiter
.RE
.RE
.IP \[bu] 2
Every OPTION processed MUST match an OPTION-ALIAS
.IP \[bu] 2
Ambiguous OPTIONs are either an error, or \f[I]always\f[R] use the first
matched OPTION-CONFIG from SPECIFICATION
.IP \[bu] 2
A \f[V]<VARIABLE>\f[R] can be set prior to invoking \f[V]getargs\f[R],
any such value is ignored and does not affect the process of any
\f[V]<TYPE>\f[R] (this allows a default value to be specified)
.PP
\f[I]EXAMPLES\f[R]
.PP
Example OPTION-CONFIGs and \f[I]some\f[R] of the OPTION formats
supported:
.IP \[bu] 2
\f[V]\[dq]d|debug[\[ti]]DebugEnabled,q|quite|s|silent[-]QuiteMode\[dq]\f[R]
.RS 2
.IP \[bu] 2
\f[V]-d\f[R], \f[V]--debug\f[R], \f[V]--deb\f[R], or \f[V]-d:true\f[R]
set \f[V]DebugEnabled\f[R] to \f[V]true\f[R]
.IP \[bu] 2
\f[V]-d:false\f[R] sets \f[V]DebugEnabled\f[R] to \f[V]false\f[R]
.IP \[bu] 2
\f[V]-q\f[R], \f[V]-quite\f[R], \f[V]-s\f[R], or \f[V]-silent:1\f[R] set
\f[V]QuiteMode\f[R] to \f[V]1\f[R]
.IP \[bu] 2
\f[V]-q -q\f[R], or \f[V]-s:2\f[R] set \f[V]QuiteMode\f[R] to
\f[V]2\f[R]
.RE
.IP \[bu] 2
\f[V]\[dq]i|input-file|file|source|uri[+]InputFiles,o|output-file|target[;]OutputFile\[dq]\f[R]
.RS 2
.IP \[bu] 2
\f[V]-iFILE\f[R], \f[V]-i=FILE\f[R], \f[V]-i FILE\f[R], or
\f[V]--file=FILE\f[R] set \f[V]InputFiles\f[R] to an emulated array with
a single element: \f[V]FILE\f[R]
.IP \[bu] 2
\f[V]--uri FIRST --URI SECOND\f[R] sets \f[V]InputFiles\f[R] to an
emulated array with two elements: \f[V]FIRST\f[R], \f[V]SECOND\f[R]
.IP \[bu] 2
\f[V]-oFILE\f[R], or \f[V]-o FILE\f[R] set \f[V]OutputFile\f[R] to
\f[V]FILE\f[R]
.IP \[bu] 2
\f[V]-oFILE1 -o FILE2\f[R] set \f[V]OutputFile\f[R] to \f[V]FILE2\f[R]
.RE
.IP \[bu] 2
\f[V]\[dq]i|input-file[:]InputFile#The file to be processed. Must exist!\[dq]\f[R]
.RS 2
.IP \[bu] 2
Output from auto-help includes the text
\f[V]The file to be processed. Must exist!\f[R].
.RE
.SS OPERAND-CONFIG
.IP
.nf
\f[C]
<ALPHA>          = ? characters from the LC_CTYPE \[aq]alpha\[aq] class ? ;
<ALNUM>          = ? characters from the LC_CTYPE \[aq]alnum\[aq] class ? ;
<GRAPH>          = ? characters from the LC_CTYPE \[aq]graph\[aq] class ? ;
<NEWLINE>        = \[dq]\[rs]n\[dq]
<WHITESPACE>     = \[dq] \[dq] | \[dq]\[rs]t\[dq]

<TYPE>           = \[dq]:\[dq] | \[dq];\[dq] | \[dq]\[ha]\[dq] ;
<VARIABLE>       = <ALPHA>, { <ALNUM> | \[dq]_\[dq] } ;
<OPERANDS>       = \[dq][\[dq] <TYPE> \[dq]]\[dq] <VARIABLE>, { \[dq],\[dq] <OPERANDS> } ;

<HELP>           = ( <GRAPH> | <WHITESPACE> ), { <HELP> }
<HELP-TEXT>      = { \[dq]#\[dq] <HELP> }
                   { <NEWLINE>, { <WHITESPACE> }, \[dq]#\[dq] <HELP> } ;

<OPERAND-CONFIG> = <OPERANDS>,
                   [ \[dq][+]\[dq] <VARIABLE> ],
                   [ <HELP-TEXT> ] ;
\f[R]
.fi
.PP
OPERAND-CONFIG as specified with the the OPTION \f[V]--operands\f[R],
\f[V]--positional\f[R] or \f[V]-p\f[R], uses the above syntax.
The following rules then apply:
.IP \[bu] 2
if multiple OPERAND-CONFIGs are specified, they are concatenated into a
single OPERAND-CONFIG
.IP \[bu] 2
each \f[V]<VARIABLE>\f[R] specifies a shell variable
.IP \[bu] 2
each single OPERAND-CONFIG consumes zero or one OPERANDs, EXCEPT the
final OPERAND-CONFIG which MAY consume any number of OPERANDs
.IP \[bu] 2
the \f[V]<TYPE>\f[R] describes how an OPERAND is processed:
.RS 2
.IP \[bu] 2
\f[B]\f[VB][:]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPERAND:
.RS 2
.IP \[bu] 2
ALWAYS consumes a single OPERAND
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of the current OPERAND
.IP \[bu] 2
MUST not have been set by any earlier OPTION/OPERAND
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][;]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPERAND:
.RS 2
.IP \[bu] 2
ALWAYS consumes a single OPERAND
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
receives the value of the current OPERAND
.IP \[bu] 2
any existing value is overwritten
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][\[ha]]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPERAND:
.RS 2
.IP \[bu] 2
MAY consume a single OPERAND
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
if \f[V]<VARIABLE>\f[R] was set by a previous OPTION/OPERAND:
.RS 2
.IP \[bu] 2
no modification is made to \f[V]<VARIABLE>\f[R]
.IP \[bu] 2
this OPERAND-CONFIG is skipped
.IP \[bu] 2
current OPERAND is retained for next OPERAND-CONFIG
.RE
.IP \[bu] 2
if \f[V]<VARIABLE>\f[R] has not been set by a previous OPTION/OPERAND,
behaves exactly like \f[V][:]\f[R]
.RE
.RE
.IP \[bu] 2
\f[B]\f[VB][+]\f[B]\f[R]
.RS 2
.IP \[bu] 2
OPERAND:
.RS 2
.IP \[bu] 2
ALWAYS consumes all remaining OPERANDs
.RE
.IP \[bu] 2
\f[V]<VARIABLE>\f[R]:
.RS 2
.IP \[bu] 2
has all remaining OPERANDs appended to any existing value as an emulated
array
.RE
.RE
.RE
.IP \[bu] 2
\f[V]<HELP-TEXT>\f[R] can follow any OPERAND-CONFIG:
.RS 2
.IP \[bu] 2
any text here is used to annotate options for auto-help, if enabled, or
as comments otherwise
.IP \[bu] 2
\f[V]<HELP-TEXT>\f[R] is always associated with a \f[I]single\f[R]
\f[V]<VARIABLE>\f[R]
.IP \[bu] 2
for more details see auto-help
.RE
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
A \f[V]<TYPE>\f[R] of \f[V][:]\f[R], \f[V][;]\f[R], or \f[V][\[ha]]\f[R]
is identical UNLESS \f[V]<VARIABLE>\f[R] was set by a previous
OPTION/OPERAND
.IP \[bu] 2
If specified, a \f[V]<TYPE>\f[R] of \f[V][+]\f[R] MUST be the last
\f[V]<OPERAND-CONFIG>\f[R]
.IP \[bu] 2
A \f[V]<TYPE>\f[R] of \f[V][\[ha]]\f[R] can be used to accept an
ARGUMENT using an OPTION \f[I]or\f[R] an OPERAND by using the same
\f[V]<VARIABLE>\f[R] for both an OPTION-CONFIG and the OPERAND-CONFIG
.IP \[bu] 2
OPERANDs are only permitted if there is an OPERAND-CONFIG, otherwise
they are an error
.IP \[bu] 2
A \f[V]<VARIABLE>\f[R] can be set prior to invoking \f[V]getargs\f[R],
any such value is ignored and does not affect the process of any
\f[V]<TYPE>\f[R] (this allows a default value to be specified)
.SS MODES
.PP
\[lq]MODES\[rq] change the processing of \f[V]getargs\f[R] in a
significant way.
.SS AUTO-HELP
.IP
.nf
\f[C]
--auto-help[=<VARIABLE>]
\f[R]
.fi
.PP
Causes \f[V]getargs\f[R] to automatically process a \f[V]--help\f[R] or
\f[V]-h\f[R] \f[V]<ARGUMENT>\f[R].
.PP
Help text is generated based on OPTION-CONFIG and OPERAND-CONFIG, with
information on how to specify values for ARGUMENTs based on their type.
.PP
The generated text is stored in \f[V]<VARIABLE>\f[R], if it was
provided, otherwise it is written to \f[V]STDOUT\f[R].
In either case, processing stops after the text has been generated.
.PP
An exit status of \f[V]1\f[R] indicates help text was generated - it
should be assumed that no ARGUMENTs have been processed.
.PP
When enabled, the OPTIONs \f[V]--help\f[R] or \f[V]-h\f[R] will be
matched by \f[V]getargs\f[R] and will never match OPTION-CONFIG
(although they may be present).
.PP
There is no performance impact for enabling this option.
.PP
\f[I]COMMAND NAME\f[R]
.PP
If an \f[V]<ID>\f[R] has been specified (i.e.\ using \f[V]--name\f[R]
option or aliases), it will be used as the name of the command in the
resulting text.
.PP
\f[V]<HELP-TEXT>\f[R]
.PP
Additional information can be provided for any of the ARGUMENTs in the
resulting text via \f[V]<HELP-TEXT>\f[R], which is arbitrary text that
can be specified along with OPTION-CONFIG or OPERAND-CONFIG.
.PP
\f[V]<HELP-TEXT>\f[R] is specified using a single \f[V]#\f[R]
(\f[V]<number-sign>\f[R]) following the OPTION or OPERAND for which the
text applies and can contain any text.
Multiple lines of \f[V]<HELP-TEXT>\f[R] may be specified by inserting a
\f[V]\[rs]n\f[R] (\f[V]<newline>\f[R]) character followed by any number
of whitespace characters, then a \f[V]#\f[R] (\f[V]<number-sign>\f[R])
and the continued \f[V]<HELP-TEXT>\f[R].
Note that only continuation lines may contain whitespace prior to the
\f[V]#\f[R] (\f[V]<number-sign>\f[R]), the first \f[V]#\f[R]
(\f[V]<number-sign>\f[R]) of any \f[V]<HELP-TEXT>\f[R] must be
immediately follow the VARIABLE to which the text applies.
.PP
Formatting for \f[V]<HELP-TEXT>\f[R] will \f[I]not\f[R] be retained:
.IP \[bu] 2
whitespace \f[I]after\f[R] the \f[V]#\f[R] (\f[V]<number-sign>\f[R])
will be removed
.IP \[bu] 2
after a \f[V]\[rs]n\f[R] (\f[V]<newline>\f[R]) any whitespace
\f[I]before\f[R] the \f[V]#\f[R] (\f[V]<number-sign>\f[R]) will be
removed
.IP \[bu] 2
additional whitespace may be removed to facilitate text wrapping
.PP
\f[I]CONFIGURATION\f[R]
.PP
Several environment variables can alter the format of the generated
text, though the general format is fixed and is different to that of
common tools due to the difficulties with automatically formatting text.
.SS SCRIPT
.IP
.nf
\f[C]
--script[=<SCRIPT>]
\f[R]
.fi
.PP
Causes \f[V]getargs\f[R] to generate a dynamic script suitable for use
with \f[V]eval\f[R] which recreates the externally visible side-effects
of running \f[V]getargs\f[R].
.PP
The script generated in this mode sets the variables in OPTION-CONFIG
and OPERAND-CONFIG appropriately for the ARGUMENTs specified.
Primarily this is intended to allow \f[V]getargs\f[R] to be invoked in a
sub-shell while allowing the setting of variables to occur
\f[I]outside\f[R] the sub-shell.
.PP
Generating the script \f[I]may\f[R] have a performance impact, and
occurs \f[I]after\f[R] all other operations, and \f[I]only\f[R] if there
were no errors.
If \f[V]<SCRIPT>\f[R] is provided, the script is stored in that
variable, otherwise it is written to \f[V]STDOUT\f[R].
.PP
This mode is used to enable the functionality of the standalone tool
\f[V]getarg\f[R] which may be installed alongside the library and can be
invoked without requiring importing the library.
For scripts that only use \f[V]getargs\f[R] once it may make sense to
use the standalone tool rather than import the library, however, for
scripts that use \f[V]getargs\f[R] more than once using the library will
be faster.
.SS VALIDATOR
.IP
.nf
\f[C]
--validate[=<VALIDATOR>]
\f[R]
.fi
.PP
Validate values given as ARGUMENTs.
.PP
This mode causes \f[V]<VALIDATOR>\f[R] to be invoked for all
OPTION-ARGUMENTs and OPERANDs, if the subsequent exit status is
\f[I]not\f[R] \f[V]0\f[R] (\f[V]<zero>\f[R]) then an error is generated
and processing stops.
.PP
Although only a single VALIDATOR is available for any invocation of
\f[V]getargs\f[R], when it is invoked, a VALIDATOR receives multiple
pieces of information, including the name of the variable in which the
value is to be stored - this should allow values to be validated based
on the expected type.
.PP
A VALIDATOR is most useful when a value is of a type that can easily be
tested for and is used repeatedly, for example ensuring filesystem paths
are valid, or that a value is numeric.
More specific validation is better handled elsewhere.
.PP
A VALIDATOR can do any processing required to determine if the value it
is given is valid, however it can \f[I]not\f[R] change the value.
.PP
If \f[V]<VALIDATOR>\f[R] is not specified,
\f[V]getargs_validate_option_value\f[R] is used, this is provided more
as an example VALIDATOR than as one of any great use, documentation for
it includes details of the arguments a VALIDATOR receives.
.SS EXIT STATUS
.IP \[bu] 2
The exit status will be \f[V]0\f[R] (\f[V]<zero>\f[R]) if, and only if,
all ARGUMENTs were processed correctly.
.IP \[bu] 2
The exit status will be \f[V]1\f[R] (\f[V]<one>\f[R]) if AUTO-HELP is
enabled \f[I]AND\f[R] an ARGUMENT specified that was either
\f[V]--help\f[R] or \f[V]-h\f[R].
This is to signal to the caller that auto-help was triggered and, in
general, should \f[I]not\f[R] be propagated any further (i.e.\ normally
\f[V]--help\f[R] is a successful operation).
.IP \[bu] 2
An unexpected exit status from an external command will be propagated to
the caller.
(This is unlikely to occur, and would normally indicate a command that
is not \f[I]POSIX.1\f[R] compliant.)
.IP \[bu] 2
Otherwise the exit status is one of values taken from FreeBSD
\f[V]SYSEXITS(3)\f[R] (https://www.freebsd.org/cgi/man.cgi?sysexits(3)):
.RS 2
.IP \[bu] 2
\f[V]EX_USAGE\f[R] for invalid SPECIFICATION usage (e.g.\ a missing
OPTION-ARGUMENT)
.IP \[bu] 2
\f[V]EX_CONFIG\f[R] for an invalid SPECIFICATION configuration (e.g.\ an
invalid character in OPTION-CONFIG)
.IP \[bu] 2
\f[V]EX_DATAERR\f[R] for invalid user ARGUMENTs (e.g.\ an OPTION that is
meant to be should be set once - i.e.\ of type \f[V][:]\f[R] - is set
twice), this is the only error exit status normally generated for user
ARGUMENT errors.
.RE
.SS ENVIRONMENT
.PP
A number of environment variables affect the library, these are split
into variables that instruct the library to work-around specific
platform issues, and variables that convey user preferences.
Variables that enable platform specific work-arounds will be
automatically set if needed, but can also be set manually to force
specific configurations.
.PP
In additional to these, there are a number of variables that are set by
the library to convey information outside of command invocation.
.PP
If unset, some variables will take an initial value from a
\f[I]BetterScripts\f[R] \f[I]POSIX Suite\f[R] wide variable, these allow
the same configuration to be used by all libraries in the suite.
.PP
After the library has been sourced, external commands must not set
library environment variables that are classified as CONSTANT.
Variables may use the \f[V]readonly\f[R] command to enforce this.
.PP
\f[B]\f[BI]If not otherwise specified, an \f[VBI]<unset>\f[BI] variable
is equivalent to the\f[B]\f[R] \f[B]\f[BI]default value.\f[B]\f[R]
.PP
\f[I]For more details see the common suite documentation.\f[R]
.SS PLATFORM CONFIGURATION
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_NO_Z_SHELL_SETOPT\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_NO_Z_SHELL_SETOPT\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable using \f[V]setopt\f[R] in \f[I]Z Shell\f[R] to ensure
\f[I]POSIX.1\f[R] like behavior.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]setopt\f[R] to set the appropriate options.
.IP \[bu] 2
\f[I]ON\f[R]: Don\[cq]t use \f[V]setopt\f[R], even in \f[I]Z Shell\f[R].
.IP \[bu] 2
Automatically enabled if \f[I]Z Shell\f[R] is detected.
.IP \[bu] 2
Any use of \f[V]setopt\f[R] is scoped as tightly as possible and should
not affect other commands.
.IP \[bu] 2
\f[I]Z Shell\f[R] has some defaults that cause non-standard behavior,
however also provides \f[V]setopt\f[R] which can be tightly scoped to
set options when required without impacting other platforms.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_NO_EXPR_EXIT_STATUS\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_NO_EXPR_EXIT_STATUS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
[Disable]/Enable ignoring \f[V]expr\f[R] exit status to indicate a match
was made.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]expr\f[R] exit status to determine if a match
was made.
.IP \[bu] 2
\f[I]ON\f[R]: Use a workaround to determine if a match was made.
(This requires a sub-shell and is therefore far slower.)
.IP \[bu] 2
Some versions of \f[V]expr\f[R] do not always properly set the exit
status, making it impossible to determine if a match was actually made.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_NO_EXPR_NESTED_CAPTURES\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_NO_EXPR_NESTED_CAPTURES\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: CONSTANT
.IP \[bu] 2
Default: <automatic>
.IP \[bu] 2
Disable/[Enable] using \f[V]expr\f[R] for any \[lq]Basic Regular
Expression\[rq]
(\f[I]BRE\f[R]) (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/basedefs/V1_chap09.html#tag_09_03)
that includes nested captures.
.IP \[bu] 2
\f[I]OFF\f[R]: Use \f[V]expr\f[R] for a \f[I]BRE\f[R] that includes
nested captures.
.IP \[bu] 2
\f[I]ON\f[R]: Any \f[I]BRE\f[R] that uses nested captures will not be
used with \f[V]expr\f[R], but will use a case specific work-around.
.IP \[bu] 2
Some versions of \f[V]expr\f[R] do not work well with or do not support
nested captures.
.SS USER PREFERENCE (OVERRIDABLE)
.PP
Configuration that CAN be overridden by OPTIONs.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_ALLOW_ABBREVIATIONS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]ON\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]abbreviations\f[R]
.IP \[bu] 2
[Enable]/Disable LONG-OPTION abbreviations.
.IP \[bu] 2
\f[I]ON\f[R]: any LONG-OPTION matches if the name is a prefix of an
OPTION-CONFIG name (e.g.\ \f[V]--debug\f[R] and \f[V]--deb\f[R] will
both match \f[V]debug\f[R]).
.IP \[bu] 2
\f[I]OFF\f[R]: abbreviations are disabled and long options must match
exactly.
.IP \[bu] 2
MAY cause unexpected results if combined with
\f[V]BS_LIBGETARGS_CONFIG_ALLOW_AMBIGUOUS\f[R].
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_ALLOW_AMBIGUOUS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]ambiguous\f[R]
.IP \[bu] 2
[Enable]/Disable detection of ambiguous user OPTIONs.
.IP \[bu] 2
\f[I]OFF\f[R]: any ambiguous OPTION is an error.
.IP \[bu] 2
\f[I]ON\f[R]: all OPTIONs use the first match found - this WILL mask
some OPTION-CONFIG errors.
.IP \[bu] 2
OPTIONs are ambiguous when multiple OPTIONs have the same name or, if
abbreviations are enabled, when an abbreviation matches multiple
OPTIONs.
.IP \[bu] 2
If abbreviations are also enabled (see
\f[V]BS_LIBGETARGS_CONFIG_ALLOW_ABBREVIATIONS\f[R]) there is a high
chance of incorrectly matching OPTIONs.
.IP \[bu] 2
\f[I]Has a measurable impact on performance.\f[R] Prefer
\f[B]\f[BI]ON\f[B]\f[R] for performance.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_CHECK_CONFIG\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]check-config\f[R]
.IP \[bu] 2
Enable/[Disable] performing basic checks on OPTION-CONFIG and
OPERAND-CONFIG before processing.
.IP \[bu] 2
\f[I]OFF\f[R]: don\[cq]t do any additional checks.
.IP \[bu] 2
\f[I]ON\f[R]: preform extra checks to ensure that OPTION-CONFIG and
OPERAND-CONFIG match the required specification.
.IP \[bu] 2
The currently available checks are relatively basic but will catch
errors that MAY otherwise be missed, however some of these may be
benign.
.IP \[bu] 2
\f[I]MAY have a performance impact.\f[R] Prefer \f[B]\f[BI]OFF\f[B]\f[R]
for performance.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_FATAL_ERRORS\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_FATAL_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Enable/[Disable] causing library errors to terminate the current
(sub-)shell.
.IP \[bu] 2
\f[I]OFF\f[R]: errors stop any further processing, and cause a non-zero
exit status, but do not cause an exception.
.IP \[bu] 2
\f[I]ON\f[R]: any library error will cause an \[lq]unset variable\[rq]
shell exception using the
\f[V]${parameter:?[word]}\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/utilities/V3_chap02.html#tag_18_06_02)
parameter expansion, where \f[V]word\f[R] is set to an error message
that \f[I]should\f[R] be displayed by the shell (this message is NOT
suppressed by \f[V]BS_LIBGETARGS_CONFIG_QUIET_ERRORS\f[R]).
.IP \[bu] 2
Both the library version of this option and the suite version can be
modified between command invocations and will affect the next command.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_INTERLEAVED_OPERANDS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]interleaved\f[R], \f[V]--[no-]mixed\f[R]
.IP \[bu] 2
Enable/[Disable] allowing matching OPTIONs \f[I]after\f[R] an OPERAND is
matched.
.IP \[bu] 2
\f[I]OFF\f[R]: all OPTIONs (and associated OPTION-ARGUMENTs) MUST appear
before the first OPERAND; i.e., the first ARGUMENT that does NOT start
with \f[V]-\f[R] (\f[V]<hyphen>\f[R]) and is NOT an OPTION-ARGUMENT
causes ALL remaining OPTIONs to be assumed to be OPERANDs \f[I]even if
they start with \f[VI]-\f[I] (\f[VI]<hyphen>\f[I])\f[R].
.IP \[bu] 2
\f[I]ON\f[R]: an ARGUMENT that does NOT start with \f[V]-\f[R]
(\f[V]<hyphen>\f[R]) and is NOT an OPTION-ARGUMENT is assumed to be an
OPERAND, but following ARGUMENTs continue to be checked for OPTIONs.
.IP \[bu] 2
In either mode the special ARGUMENT \f[V]--\f[R] stops OPTION processing
and any remaining ARGUMENTs are treated as OPERANDs
.IP \[bu] 2
Implied by \f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNMATCHED\f[R]
.IP \[bu] 2
Mutually exclusive with \f[V]BS_LIBGETARGS_CONFIG_STRICT_OPERANDS\f[R]
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_ALLOW_POSIX_LONG\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]posix-long\f[R]
.IP \[bu] 2
Enable/[Disable] matching LONG-OPTIONs with a single preceding
\f[V]-\f[R] (\f[V]<hyphen>\f[R]) character instead of the normally
required two.
.IP \[bu] 2
\f[I]OFF\f[R]: LONG-OPTIONs require the prefix \f[V]--\f[R]
.IP \[bu] 2
\f[I]ON\f[R]: any multi-character OPTION following a single \f[V]-\f[R]
(\f[V]<hyphen>\f[R]) is checked to see if it matches a LONG-OPTION
before checking if it is a COMPOUND-OPTION, meaning matching
COMPOUND-OPTIONs is slower.
.IP \[bu] 2
\f[I]Has a measurable impact on performance.\f[R] Prefer
\f[B]\f[BI]OFF\f[B]\f[R] for performance.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_QUIET_ERRORS\f[R]
.IP \[bu] 2
Suite: \f[V]BETTER_SCRIPTS_CONFIG_QUIET_ERRORS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
[Enable]/Disable library error message output.
.IP \[bu] 2
\f[I]OFF\f[R]: error messages will be written to \f[V]STDERR\f[R] as:
\f[V][<ID>]: ERROR: <MESSAGE>\f[R] (where \f[V]<ID>\f[R] is set using
the \f[V]--id\f[R] OPTION).
.IP \[bu] 2
\f[I]ON\f[R]: library error messages will be suppressed.
.IP \[bu] 2
The most recent error message is always available in
\f[V]BS_LIBGETARGS_LAST_ERROR\f[R] even when error output is suppressed.
.IP \[bu] 2
Both the library version of this option and the suite version can be
modified between command invocations and will affect the next command.
.IP \[bu] 2
Does NOT affect errors from non-library commands, which \f[I]may\f[R]
still produce output.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_STRICT_OPERANDS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]strict\f[R]
.IP \[bu] 2
Enable/[Disable] requiring the use of \f[V]--\f[R] to separate OPTIONs
from OPERANDs.
.IP \[bu] 2
\f[I]OFF\f[R]: the first ARGUMENT that is not and OPTION or an
OPTION-ARGUMENT is an OPERAND and causes all further ARGUMENTs to be
OPERANDs.
.IP \[bu] 2
\f[I]ON\f[R]: an ARGUMENT that is exactly \f[V]--\f[R] must be present
after \f[I]all\f[R] OPTIONs and before \f[I]any\f[R] OPERANDs.
.IP \[bu] 2
Can help detect some usage errors.
.IP \[bu] 2
Mutually exclusive with
\f[V]BS_LIBGETARGS_CONFIG_INTERLEAVED_OPERANDS\f[R].
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNSAFE_OPTIONS\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]unsafe\f[R]
.IP \[bu] 2
[Enable]/Disable escaping OPTION characters to avoid any erroneous
results when matching with regular expressions.
Characters in the supported set for OPTION-NAMEs \f[V][[:alnum:]_-]\f[R]
do not need this processing, while characters outside this range MAY
(e.g.\ \f[V].\f[R] (\f[V]<period>\f[R]) is problematic).
.IP \[bu] 2
\f[I]OFF\f[R]: OPTION-NAMEs have all characters made safe for use in a
regular expression.
.IP \[bu] 2
\f[I]ON\f[R]: OPTION-NAMEs are used as is and may match incorrectly if
they contain specific characters.
.IP \[bu] 2
This affects the OPTIONs being processed and NOT those in the
OPTION-CONFIG.
.IP \[bu] 2
MAY have a performance impact.
Prefer \f[B]\f[BI]ON\f[B]\f[R] for performance.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_AUTO_UNSET\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]unset\f[R]
.IP \[bu] 2
Enable/[Disable] automatic unsetting of all VARIABLES named in
OPTION-CONFIG and OPERAND-CONFIG.
.IP \[bu] 2
\f[I]ON\f[R]: every variable specified in OPTION-CONFIG and
OPERAND-CONFIG is automatically unset before ARGUMENTs are processed.
.IP \[bu] 2
\f[I]OFF\f[R]: variables need to be set to a known value or it will not
be possible to correctly determine what OPTIONs have been matched.
.IP \[bu] 2
Normally desirable to have enabled, but using it MAY have performance
issues, and it can not be used alongside default values for variables
(i.e.\ values set before \f[V]getargs\f[R] is invoked).
.IP \[bu] 2
MAY have a performance impact.
Prefer \f[B]\f[BI]OFF\f[B]\f[R] for performance.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNMATCHED\f[R]
.IP \[bu] 2
Type: FLAG
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[I]OFF\f[R]
.IP \[bu] 2
Override: \f[V]--[no-]unmatched\f[R]
.IP \[bu] 2
Enable/[Disable] matching an unrecognized OPTION as an OPERAND.
.IP \[bu] 2
\f[I]OFF\f[R]: any unrecognized OPTION is an error.
.IP \[bu] 2
\f[I]ON\f[R]: any unrecognized OPTION is treated as an OPERAND.
.IP \[bu] 2
Useful for commands where most arguments are not used, but instead
forwarded to another command, where having this enabled significantly
reduces code and isolates the command from changes in the arguments
accepted by the target command.
.IP \[bu] 2
In either mode the special ARGUMENT \f[V]--\f[R] stops OPTION processing
and any remaining ARGUMENTs are treated as OPERANDs.
.IP \[bu] 2
Although still permitted, there is no practical way to support the
normal OPERAND processing when this is enabled; the only OPERAND-CONFIG
that is useful will be one containing a single \f[V][+]\f[R] type.
If other OPERANDs are required, these must be manually extracted from
the resulting array.
.IP \[bu] 2
If using a VALIDATOR, any unmatched values will be sent to the VALIDATOR
as OPERANDs.
.IP \[bu] 2
Implies \f[V]BS_LIBGETARGS_CONFIG_INTERLEAVED_OPERANDS\f[R].
.IP \[bu] 2
Mutually exclusive with \f[V]BS_LIBGETARGS_CONFIG_STRICT_OPERANDS\f[R].
.SS USER PREFERENCE
.PP
Configuration that can NOT be overridden by OPTIONs.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_TRUE_VALUE\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[V]true\f[R]
.IP \[bu] 2
Value used as \f[V]true\f[R] for options with the type negatable
SWITCH-OPTION (i.e.\ \f[V][\[ti]]\f[R]).
.IP \[bu] 2
The value given to a negatable SWITCH-OPTION variable when the ARGUMENT
was specified without an OPTION-TAG.
.IP \[bu] 2
Also one of the values accepted as an OPTION-TAG for negatable
SWITCH-OPTIONs.
.IP \[bu] 2
Can be null.
.IP \[bu] 2
SHOULD differ from \f[V]BS_LIBGETARGS_CONFIG_FALSE_VALUE\f[R] however
this is NOT enforced.
.IP \[bu] 2
A negatable SWITCH-OPTION \f[I]only\f[R] accepts the value here or the
value from \f[V]BS_LIBGETARGS_CONFIG_FALSE_VALUE\f[R] as an OPTION-TAG.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_FALSE_VALUE\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[V]false\f[R]
.IP \[bu] 2
Value used as \f[V]false\f[R] for options with the type negatable
SWITCH-OPTION (i.e.\ \f[V][\[ti]]\f[R]).
.IP \[bu] 2
This value can be specified as an OPTION-TAG for the OPTION in which
case the OPTION variable will receive this value.
.IP \[bu] 2
Can be null.
.IP \[bu] 2
SHOULD differ from \f[V]BS_LIBGETARGS_CONFIG_TRUE_VALUE\f[R] however
this is NOT enforced.
.IP \[bu] 2
A negatable SWITCH-OPTION \f[I]only\f[R] accepts the value here or the
value from \f[V]BS_LIBGETARGS_CONFIG_TRUE_VALUE\f[R] as an OPTION-TAG.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_OPTIONAL_VALUE\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: <unset>
.IP \[bu] 2
The value an OPTION variable receives if it takes an optional
OPTION-ARGUMENT and no OPTION-ARGUMENT was specified.
.IP \[bu] 2
It is not possible to set a value here that could not have also been set
as the OPTION-ARGUMENT for the OPTION, e.g., the default of <unset> is
the same value as would occur if the OPTION-ARGUMENT was an empty
string.
.IP \[bu] 2
It is highly recommended that this be set to a more useful value if
optional OPTION-ARGUMENTs are used.
.SS AUTO-HELP CONFIGURATION
.PP
Configuration related only to AUTO-HELP mode.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_HELP_WRAP_COLUMNS\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: Value from the \f[V]COLUMNS\f[R] environment variable or
\f[V]80\f[R] if that variable is not set.
.IP \[bu] 2
Specifies the maximum width of the generated help text, any lines longer
than this will be wrapped.
.IP \[bu] 2
May be set to any numeric value greater than \f[V]8\f[R], although small
values will lead to illegible output.
.IP \[bu] 2
If set to the empty string (aka null), wrapping is disabled.
.IP \[bu] 2
If set to an invalid value, the default value is used.
.IP \[bu] 2
Help text uses an indent of \f[V]8\f[R] characters which counts towards
the length of lines for the purposes of wrapping.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_HELP_MULTI_OPTION\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[V]May be specified multiple times.\f[R]
.IP \[bu] 2
A string added to help for OPTIONs of the \f[V][+]\f[R] type.
.IP \[bu] 2
Used to indicate the OPTION can be specified more than once.
.IP \[bu] 2
If set to the empty string (aka null), no text is added.
.IP \[bu] 2
WILL cause errors if it contains any \f[V]\[rs]n\f[R]
(\f[V]<newline>\f[R]) characters.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_HELP_MULTI_OPERAND\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[V]May be specified multiple times.\f[R]
.IP \[bu] 2
A string added to help for OPERANDs of the \f[V][+]\f[R] type.
.IP \[bu] 2
Used to indicate the OPERAND can be specified more than once.
.IP \[bu] 2
If set to the empty string (aka null), no text is added.
.IP \[bu] 2
WILL cause errors if it contains any \f[V]\[rs]n\f[R]
(\f[V]<newline>\f[R]) characters.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_CONFIG_HELP_ALTERNATIVE_OPERAND\f[R]
.IP \[bu] 2
Type: TEXT
.IP \[bu] 2
Class: VARIABLE
.IP \[bu] 2
Default: \f[V]Alternative to <OPTION>.\f[R]
.IP \[bu] 2
A string added to help for an OPERAND if there is an OPTION that
provides the same purpose.
(i.e.\ only OPERANDs of the type \f[V][\[ha]]\f[R] or \f[V][+]\f[R]).
.IP \[bu] 2
The literal string \f[V]<OPTION>\f[R] is replaced with one of the
OPTION-NAMEs for the OPTION that can alternatively be used.
.IP \[bu] 2
If set to the empty string (aka null), no text is added.
.IP \[bu] 2
WILL cause errors if it contains any \f[V]\[rs]n\f[R]
(\f[V]<newline>\f[R]) characters.
.SS INFORMATIONAL
.PP
Variables that convey library information.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION_MAJOR\f[R]
.IP \[bu] 2
Integer >= 1.
.IP \[bu] 2
Incremented when there are significant changes, or any changes break
compatibility with previous versions.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION_MINOR\f[R]
.IP \[bu] 2
Integer >= 0.
.IP \[bu] 2
Incremented for significant changes that do not break compatibility with
previous versions.
.IP \[bu] 2
Reset to 0 when \f[V]BS_LIBGETARGS_VERSION_MAJOR\f[R] changes.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION_PATCH\f[R]
.IP \[bu] 2
Integer >= 0.
.IP \[bu] 2
Incremented for minor revisions or bugfixes.
.IP \[bu] 2
Reset to 0 when \f[V]BS_LIBGETARGS_VERSION_MINOR\f[R] changes.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION_RELEASE\f[R]
.IP \[bu] 2
A string indicating a pre-release version, always null for full-release
versions.
.IP \[bu] 2
Possible values include `alpha', `beta', `rc', etc, (a numerical suffix
may also be appended).
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION_FULL\f[R]
.IP \[bu] 2
Full version combining \f[V]BS_LIBGETARGS_VERSION_MAJOR\f[R],
\f[V]BS_LIBGETARGS_VERSION_MINOR\f[R], and
\f[V]BS_LIBGETARGS_VERSION_PATCH\f[R] as a single integer.
.IP \[bu] 2
Can be used in numerical comparisons.
.IP \[bu] 2
Format: \f[V]MNNNPPP\f[R] where, \f[V]M\f[R] is the \f[V]MAJOR\f[R]
version, \f[V]NNN\f[R] is the \f[V]MINOR\f[R] version (3 digit, zero
padded), and \f[V]PPP\f[R] is the \f[V]PATCH\f[R] version (3 digit, zero
padded).
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_VERSION\f[R]
.IP \[bu] 2
Full version combining \f[V]BS_LIBGETARGS_VERSION_MAJOR\f[R],
\f[V]BS_LIBGETARGS_VERSION_MINOR\f[R],
\f[V]BS_LIBARRAY_VERSION_PATCH\f[R], and
\f[V]BS_LIBGETARGS_VERSION_RELEASE\f[R] as a formatted string.
.IP \[bu] 2
Format:
\f[V]BetterScripts \[aq]libgetargs\[aq] vMAJOR.MINOR.PATCH[-RELEASE]\f[R].
.IP \[bu] 2
Derived tools MUST include unique identifying information in this value
that differentiates them from the BetterScripts versions.
(This information should precede the version number.)
.IP \[bu] 2
This value is output when the \f[V]--version\f[R] OPTION is used.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_TYPE_OPT_ARG\f[R]
.IP \[bu] 2
Value passed to the validation command to indicate the type of ARGUMENT
being validated.
.IP \[bu] 2
Indicates the OPTION parameter is a known OPTION and the VALUE parameter
is the following ARGUMENT (e.g.\ \f[V]--OPTION VALUE\f[R],
\f[V]-O VALUE\f[R], etc.).
.IP \[bu] 2
Implies the VALUE parameter MUST be a valid OPTION-ARGUMENT for the
specified OPTION.
.IP \[bu] 2
See \f[V]getargs_validate_option_value\f[R],
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_TYPE_OPT_ARG_AGGREGATE\f[R]
.IP \[bu] 2
Value passed to the validation command to indicate the type of ARGUMENT
being validated.
.IP \[bu] 2
Indicates the OPTION parameter a known OPTION and the VALUE parameter
was specified as part of the same ARGUMENT without any delimiter
(e.g.\ \f[V]-OVALUE\f[R]).
.IP \[bu] 2
Implies the VALUE parameter MUST be a valid OPTION-ARGUMENT for the
specified OPTION.
.IP \[bu] 2
See \f[V]getargs_validate_option_value\f[R],
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_TYPE_OPT_ARG_DELIMITED\f[R]
.IP \[bu] 2
Value passed to the validation command to indicate the type of ARGUMENT
being validated.
.IP \[bu] 2
Indicates the OPTION parameter a known OPTION and the VALUE parameter
was specified as part of the same ARGUMENT delimited by \f[V]=\f[R]
(\f[V]<equals>\f[R]) (e.g.\ \f[V]--OPTION=VALUE\f[R],
\f[V]-O=VALUE\f[R], etc.).
.IP \[bu] 2
Implies the VALUE parameter MUST be a valid OPTION-ARGUMENT for the
specified OPTION.
.IP \[bu] 2
See \f[V]getargs_validate_option_value\f[R],
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_TYPE_OPERAND\f[R]
.IP \[bu] 2
Value passed to the validation command to indicate the type of ARGUMENT
being validated.
.IP \[bu] 2
Indicates the VALUE parameter is an ARGUMENT that was matched as an
OPERAND.
.IP \[bu] 2
Implies the VALUE parameter MUST be a valid OPERAND.
.IP \[bu] 2
See \f[V]getargs_validate_option_value\f[R],
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_LAST_ERROR\f[R]
.IP \[bu] 2
Stores the error message of the most recent error.
.IP \[bu] 2
ONLY valid immediately following a command for which the exit status is
not \f[V]0\f[R] (\f[V]<zero>\f[R]).
.IP \[bu] 2
Available even when error output is suppressed.
.PP
   *   *   *   *   *
.SS \f[V]BS_LIBGETARGS_SOURCED\f[R]
.IP \[bu] 2
Set (and non-null) once the library has been sourced.
.IP \[bu] 2
Dependant scripts can query if this variable is set to determine if this
file has been sourced.
.SS ADDITIONAL COMMANDS
.PP
   *   *   *   *   *
.SS \f[V]getargs_validate_option_value\f[R]
.PP
Simple VALIDATOR that writes a warning to \f[V]STDERR\f[R] if an
OPTION-ARGUMENT or OPERAND starts with a \f[V]-\f[R]
(\f[V]<hyphen>\f[R]).
No other action is taken; processing continues as normal after the
warning is generated.
.PP
If validation is enabled without a VALIDATOR being specified, this
VALIDATOR is used.
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
getargs_validate_option_value <TARGET> <OPTION> <TYPE> <VALUE>
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]TARGET\f[R] [in]
The \f[B]name\f[R] of the target variable specified in the OPTION-CONFIG
or OPERAND-CONFIG for the OPTION.
.TP
\f[V]OPTION\f[R] [in]
The OPTION as it was matched.
For an OPERAND this is either null (an empty string), \f[V]-\f[R] or
\f[V]--\f[R].
.TP
\f[V]TYPE\f[R] [in]
The type of \f[V]VALUE\f[R].
One of the \f[V]BS_LIBGETARGS_TYPE_*\f[R] constants:
\f[V]BS_LIBGETARGS_TYPE_OPT_ARG\f[R],
\f[V]BS_LIBGETARGS_TYPE_OPT_ARG_DELIMITED\f[R],
\f[V]BS_LIBGETARGS_TYPE_OPT_ARG_AGGREGATE\f[R], or
\f[V]BS_LIBGETARGS_TYPE_OPERAND\f[R].
.TP
\f[V]VALUE\f[R] [in]
The value to check.
MAY be null (i.e.\ the empty string).
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
When \f[V]TYPE\f[R] is \f[V]BS_LIBGETARGS_TYPE_OPERAND\f[R],
\f[V]OPTION\f[R] is used to indicate how the OPERAND was matched:
.RS 2
.IP \[bu] 2
\f[V]--\f[R]: the OPERAND was preceded by the \f[V]--\f[R] argument (so
is an explicit OPERAND)
.IP \[bu] 2
null/empty: an interleaved/mixed OPERAND (see
\f[V]BS_LIBGETARGS_CONFIG_INTERLEAVED_OPERANDS\f[R])
.IP \[bu] 2
\f[V]-\f[R]: an unmatched OPTION (see
\f[V]BS_LIBGETARGS_CONFIG_ALLOW_UNMATCHED\f[R]), in this case,
\f[V]VALUE\f[R] \f[I]may\f[R] be an OPTION.
.RE
.IP \[bu] 2
Provided as an example VALIDATOR, not likely to be generally useful,
although it can detect some potential errors where an OPTION-ARGUMENT
has been omitted.
.IP \[bu] 2
When validation is enabled, this is invoked for all OPTIONs that have an
OPTION-ARGUMENT and for all OPERANDs.
.IP \[bu] 2
A VALIDATOR can NOT change the value, although it is possible to edit
the contents of \f[V]TARGET\f[R] this is NOT supported and in most cases
any changes will be lost.
.IP \[bu] 2
Any output written by a VALIDATOR to \f[V]STDOUT\f[R] is redirected to
\f[V]STDERR\f[R] and is NOT affected by configuration that affects other
\f[V]getargs\f[R] errors.
.IP \[bu] 2
An \[lq]invalid value\[rq] error will be generated by \f[V]getargs\f[R]
for any value that fails validation, this will appear \f[I]after\f[R]
any output generated by the VALIDATOR.
.IP \[bu] 2
For this VALIDATOR the warning generated can NOT be suppressed
(i.e.\ output is always generated if an issue is found).
.PP
   *   *   *   *   *
.SS \f[V]getargs_operands_to_options\f[R]
.PP
Helper to convert OPERANDs in OPTIONs with a given option name.
.PP
Intended for use when OPERANDs need to be used with a command that does
not support OPERANDs.
Each OPERAND becomes an OPTION-ARGUMENT for the given OPTION (this
requires the command allows specifying a specific OPTION multiple
times).
.PP
\f[I]SYNOPSIS\f[R]
.IP
.nf
\f[C]
getargs_operands_to_options <VALUES> <OPTION>
\f[R]
.fi
.PP
\f[I]ARGUMENTS\f[R]
.TP
\f[V]VALUES\f[R] [in/out:ref]
An emulated array containing the values to be converted.
Receives generated OPTIONs as an emulated array.
MUST be a valid \f[I]POSIX.1\f[R] name.
Can reference an empty array.
.TP
\f[V]OPTION\f[R] [in]
The OPTION-NAME to use for each element in \f[V]VALUES\f[R].
Each element in \f[V]VALUES\f[R] will become and OPTION-ARGUMENT for
\f[V]OPTION\f[R].
A trailing \f[V]=\f[R] (\f[V]<equals>\f[R]) will cause the
OPTION-ARGUMENT to be made an AGGREGATE-OPTION-ARGUMENT.
.PP
\f[I]NOTES\f[R]
.IP \[bu] 2
A command that accepts OPERANDs often uses these to invoke additional
commands.
However, it\[cq]s not always easy/possible/desirable to pass OPERANDs
directly to the invoked commands - where this is the case, passing
OPERANDs as multiple OPTIONs with OPTION-ARGUMENTs may be required.
.IP \[bu] 2
Although intended for OPERANDs, can be used for any values; simple turns
all elements in \f[V]VALUES\f[R] into OPTION-ARGUMENTs for the given
\f[V]OPTION\f[R].
.IP \[bu] 2
For AGGREGATE-OPTION-ARGUMENTs the number of elements in the output will
be the same as the input, otherwise there will be twice the number of
output elements.
.IP \[bu] 2
Since the same OPTION is used for \f[B]all\f[R] parameters, this must be
supported by the command for which the output is intended.
In \f[V]getargs\f[R] terminology, this means the OPTION needs to have
the type \f[V][+]\f[R] (i.e.\ be a \f[I]multi\f[R] OPTION-ARGUMENT)
OPTION.
.IP \[bu] 2
For commands that support \f[V]getargs\f[R] this is not required as an
array of values can be used directly with \f[V][+]\f[R] type OPTIONs by
using an OPTION-TAG.
.SS STANDARDS
.IP \[bu] 2
\f[I]POSIX.1-2008\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition)
.RS 2
.IP \[bu] 2
also known as:
.RS 2
.IP \[bu] 2
\f[I]The Open Group Base Specifications Issue 7\f[R]
.IP \[bu] 2
\f[I]IEEE Std 1003.1-2008\f[R]
.IP \[bu] 2
\f[I]The Single UNIX Specification Version 4 (SUSv4)\f[R]
.RE
.IP \[bu] 2
the more recent
\f[I]POSIX.1-2017\f[R] (https://pubs.opengroup.org/onlinepubs/9699919799)
is functionally identical to \f[I]POSIX.1-2008\f[R], but incorporates
some errata
.RE
.IP \[bu] 2
FreeBSD SYSEXITS(3) (https://www.freebsd.org/cgi/man.cgi?sysexits(3))
.RS 2
.IP \[bu] 2
while not truly standard, these are used by many projects
.RE
.IP \[bu] 2
Semantic Versioning v2.0.0 (https://semver.org/)
.SS NOTES
.SS TERMINOLOGY
.PP
Terminology used for \f[V]getargs\f[R] is based on the \f[I]POSIX.1\f[R]
\[lq]Utility
Conventions\[rq] (https://pubs.opengroup.org/onlinepubs/9699919799.2008edition/basedefs/V1_chap12.html).
.PP
\f[I]POSIX.1 Terms\f[R]
.IP \[bu] 2
\f[V]ARGUMENT\f[R]
.RS 2
.IP \[bu] 2
a value passed to a command when invoked
.IP \[bu] 2
assigned to shell positional parameters
.IP \[bu] 2
every \f[V]ARGUMENT\f[R] is either an \f[V]OPTION\f[R], an
\f[V]OPTION-ARGUMENT\f[R] or an \f[V]OPERAND\f[R]
.RE
.IP \[bu] 2
\f[V]OPTION\f[R]
.RS 2
.IP \[bu] 2
an \f[V]ARGUMENT\f[R] starts with \f[V]-\f[R] (\f[V]<hyphen>\f[R])
character
.IP \[bu] 2
any \f[V]OPTION\f[R] may be associated with an \f[V]OPTION-ARGUMENT\f[R]
.RE
.IP \[bu] 2
\f[V]OPTION-ARGUMENT\f[R]
.RS 2
.IP \[bu] 2
a value given to a specific \f[V]OPTION\f[R]
.IP \[bu] 2
specified either as the subsequent \f[V]ARGUMENT\f[R], or as part of the
same \f[V]ARGUMENT\f[R] as the associated \f[V]OPTION\f[R]
.IP \[bu] 2
an optional \f[V]OPTION-ARGUMENT\f[R] can only be specified as part of
the same string as the \f[V]OPTION\f[R]
.RE
.IP \[bu] 2
\f[V]OPERAND\f[R]
.RS 2
.IP \[bu] 2
an \f[V]ARGUMENT\f[R] that is not an \f[V]OPTION\f[R] or an
\f[V]OPTION-ARGUMENT\f[R]
.RE
.PP
\f[I]Additional Terms\f[R]
.IP \[bu] 2
\f[V]OPTION-NAME\f[R] \f[I]or\f[R] \f[V]NAME\f[R]
.RS 2
.IP \[bu] 2
the characters excluding the \f[V]-\f[R] (\f[V]<hyphen>\f[R]) prefix
.IP \[bu] 2
\f[I]uniquely\f[R] defines an \f[V]OPTION\f[R] for a given command
.IP \[bu] 2
if multiple \f[V]OPTION-NAME\f[R]s are provided for a single
\f[V]OPTION\f[R], each is an \f[V]OPTION-ALIAS\f[R] (\f[I]or\f[R]
\f[V]ALIAS\f[R]) for that \f[V]OPTION\f[R]
.RE
.IP \[bu] 2
\f[V]SHORT-OPTION\f[R] \f[I]or\f[R] \f[V]SHORT\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION\f[R] where the \f[V]OPTION-NAME\f[R] is a single
character
.IP \[bu] 2
always specified with a single leading \f[V]-\f[R] (\f[V]<hyphen>\f[R])
.RE
.IP \[bu] 2
\f[V]COMPOUND-OPTION\f[R] \f[I]or\f[R] \f[V]COMPOUND\f[R]
.RS 2
.IP \[bu] 2
multiple \f[V]SHORT-OPTION\f[R]s specified as a single \f[V]OPTION\f[R]
following a single leading \f[V]-\f[R] (\f[V]<hyphen>\f[R])
.IP \[bu] 2
only the last \f[V]SHORT-OPTION\f[R] in \f[V]COMPOUND-OPTION\f[R] can
have an \f[V]OPTION-ARGUMENT\f[R]
.RE
.IP \[bu] 2
\f[V]LONG-OPTION\f[R] \f[I]or\f[R] \f[V]LONG\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION\f[R] where the \f[V]OPTION-NAME\f[R] is a two or more
characters
.IP \[bu] 2
may be specified using the prefix \f[V]-\f[R] (\f[V]<hyphen>\f[R]) or
\f[V]--\f[R] (\f[V]<hyphen><hyphen>\f[R])
.RE
.IP \[bu] 2
\f[V]POSIX-LONG-OPTION\f[R] \f[I]or\f[R] \f[V]POSIX-LONG\f[R]
.RS 2
.IP \[bu] 2
a \f[V]LONG-OPTION\f[R] with the prefix \f[V]-\f[R] (\f[V]<hyphen>\f[R])
.RE
.IP \[bu] 2
\f[V]GNU-LONG-OPTION\f[R] \f[I]or\f[R] \f[V]GNU-LONG\f[R]
.RS 2
.IP \[bu] 2
a \f[V]LONG-OPTION\f[R] with the prefix \f[V]--\f[R]
(\f[V]<hyphen><hyphen>\f[R])
.RE
.IP \[bu] 2
\f[V]ABBREVIATED-LONG-OPTION\f[R] \f[I]or\f[R]
\f[V]ABBREVIATED-OPTION\f[R]
.RS 2
.IP \[bu] 2
a \f[V]LONG-OPTION\f[R] that only matches as a prefix of a
\f[V]OPTION-NAME\f[R]
.IP \[bu] 2
has a minimum length of 2 characters
.RE
.IP \[bu] 2
\f[V]SWITCH-OPTION\f[R] \f[I]or\f[R] \f[V]SWITCH\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION\f[R] which has no \f[V]OPTION-ARGUMENT\f[R]
.RE
.IP \[bu] 2
\f[V]OPTION-TAG\f[R] \f[I]or\f[R] \f[V]TAG\f[R]
.RS 2
.IP \[bu] 2
a suffix appended to an \f[V]OPTION\f[R] following a \f[V]:\f[R]
(\f[V]<colon>\f[R]) character
.IP \[bu] 2
modifies how the \f[V]OPTION\f[R] is processed
.RE
.IP \[bu] 2
\f[V]AGGREGATE-OPTION-ARGUMENT\f[R] \f[I]or\f[R]
\f[V]AGGREGATE-ARGUMENT\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION-ARGUMENT\f[R] specified as part of the same
\f[V]ARGUMENT\f[R] as the \f[V]OPTION\f[R] itself
.IP \[bu] 2
delimited from an \f[V]OPTION\f[R] using \f[V]=\f[R]
(\f[V]<equals>\f[R]) (optional for \f[V]SHORT-OPTION\f[R]s and
\f[V]COMPOUND-OPTION\f[R]s)
.RE
.PP
For each \f[V]OPTION\f[R] an \f[V]OPTION-ARGUMENT\f[R] is either:
.IP \[bu] 2
\f[I]prohibited\f[R]
.RS 2
.IP \[bu] 2
the \f[V]OPTION\f[R] is a \f[V]SWITCH-OPTION\f[R]
.RE
.IP \[bu] 2
\f[I]optional\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION-ARGUMENT\f[R] MAY be specified
.IP \[bu] 2
\f[V]OPTION-ARGUMENT\f[R] MUST be specified in the same
\f[V]ARGUMENT\f[R] as the \f[V]OPTION\f[R] (a \f[V]LONG-OPTION\f[R] with
an \f[V]OPTION-ARGUMENT\f[R] MUST delimit the \f[V]OPTION\f[R] from the
\f[V]OPTION-ARGUMENT\f[R] using an \f[V]=\f[R] (\f[V]<equals>\f[R])
character)
.RE
.IP \[bu] 2
\f[I]required\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION-ARGUMENT\f[R] is REQUIRED
.IP \[bu] 2
it is an error to specify the \f[V]OPTION\f[R] more than once
.RE
.IP \[bu] 2
\f[I]resettable\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION-ARGUMENT\f[R] is REQUIRED
.IP \[bu] 2
The \f[V]OPTION\f[R] can be specified multiple times
.IP \[bu] 2
only the last specified \f[V]OPTION-ARGUMENT\f[R] is used
.RE
.IP \[bu] 2
\f[I]multi\f[R]
.RS 2
.IP \[bu] 2
an \f[V]OPTION-ARGUMENT\f[R] is REQUIRED
.IP \[bu] 2
the \f[V]OPTION\f[R] can be specified multiple times, and \f[I]all\f[R]
\f[V]OPTION-ARGUMENT\f[R]s are used
.RE
.PP
A \f[V]SWITCH-OPTION\f[R] is either:
.IP \[bu] 2
\f[I]simple\f[R]
.RS 2
.IP \[bu] 2
MUST be specified at most once
.RE
.IP \[bu] 2
\f[I]incrementing\f[R]
.RS 2
.IP \[bu] 2
MAY be specified multiple times
.IP \[bu] 2
each occurrence increments the currently stored value for the
\f[V]OPTION\f[R]
.IP \[bu] 2
MAY be specified with a \f[I]numerical\f[R] \f[V]OPTION-TAG\f[R] which
sets the currently stored value for the \f[V]OPTION\f[R]
.RE
.IP \[bu] 2
\f[I]negatable\f[R]
.RS 2
.IP \[bu] 2
MAY be specified multiple times
.IP \[bu] 2
is either \f[V]<unset>\f[R], \f[V]true\f[R], or \f[V]false\f[R]
.IP \[bu] 2
MAY be specified with a \f[V]OPTION-TAG\f[R] of either \f[V]true\f[R] or
\f[V]false\f[R] which sets the currently stored value for the
\f[V]OPTION\f[R]
.IP \[bu] 2
if no \f[V]OPTION-TAG\f[R] is specified, value is set to \f[V]true\f[R]
.RE
.PP
\f[I]Notes\f[R]
.IP \[bu] 2
As the \f[V]GNU-LONG-OPTION\f[R] format is that which is most widely
used it is sometimes referred to as simply \f[V]LONG-OPTION\f[R], while
a \f[V]POSIX-LONG-OPTION\f[R] is always explicitly named as such (when
such a distinction matters).
.IP \[bu] 2
A \f[I]simple\f[R] \f[V]SWITCH-OPTION\f[R] is \f[I]NOT\f[R] directly
supported by \f[V]getargs\f[R] but can be emulated using the other types
of \f[V]SWITCH-OPTION\f[R].
.PP
\f[I]Example Arguments\f[R]
.IP
.nf
\f[C]
 command [-a] [-b] [-c value] [-debug] [--verbose|-v] [-user|-u[value]] [value...]

 command -deb:false --verbose:1 -abc FIRST -uSECOND --password=THIRD FOURTH
\f[R]
.fi
.IP \[bu] 2
\f[V]-a\f[R],\f[V]-b\f[R],\f[V]-c\f[R],\f[V]-v\f[R], and \f[V]-u\f[R]
are \f[V]SHORT-OPTION\f[R]s
.IP \[bu] 2
\f[V]-debug\f[R] is a \f[V]POSIX-LONG-OPTION\f[R]
.IP \[bu] 2
\f[V]--verbose\f[R] is a \f[V]GNU-LONG-OPTION\f[R]
.IP \[bu] 2
\f[V]FIRST\f[R], \f[V]SECOND\f[R], and \f[V]THIRD\f[R] are
\f[V]OPTION-ARGUMENT\f[R]s
.IP \[bu] 2
\f[V]FOURTH\f[R] is an \f[V]OPERAND\f[R]
.IP \[bu] 2
\f[V]-a\f[R],\f[V]-b\f[R],\f[V]-debug\f[R],\f[V]--verbose|-v\f[R], and
\f[V]-u\f[R] are \f[V]SWITCH-OPTION\f[R]s
.IP \[bu] 2
\f[V]-abc\f[R] is a \f[V]COMPOUND-OPTION\f[R]
.IP \[bu] 2
\f[V]SECOND\f[R] and \f[V]THIRD\f[R] are
\f[V]AGGREGATE-OPTION-ARGUMENT\f[R]s
.IP \[bu] 2
\f[V]SECOND\f[R] is an \f[I]optional\f[R] \f[V]OPTION-ARGUMENT\f[R]
.IP \[bu] 2
\f[V]-deb\f[R] is an \f[V]ABBREVIATED-LONG-OPTION\f[R]
.IP \[bu] 2
\f[V]false\f[R] and \f[V]1\f[R] are \f[V]OPTION-TAG\f[R]s
.IP \[bu] 2
\f[V]-deb:false\f[R] is a \f[I]negatable\f[R] \f[V]SWITCH-OPTION\f[R]
.IP \[bu] 2
\f[V]--verbose:1\f[R] is an \f[I]incrementing\f[R]
\f[V]SWITCH-OPTION\f[R]
.IP \[bu] 2
\f[V]--verbose:1\f[R] is equivalent to \f[V]--verbose\f[R] and
\f[V]-deb:true\f[R] is equivalent to \f[V]-deb\f[R]
.SS GENERAL
.IP \[bu] 2
The first ARGUMENT with the value \f[V]--\f[R] is a special ARGUMENT
that acts as a delimiter marking the end of OPTIONs; any following
ARGUMENTs are considered OPERANDs.
It is highly recommended that this is used where possible - albeit rare,
omitting this can lead to difficult to diagnose errors in some use
cases.
.IP \[bu] 2
Much of this library is only supported in certain circumstances, for
example when the \f[V]POSIX\f[R] locale is used; note that
\[lq]unsupported\[rq] does not imply that such usage will not work,
however unexpected behavior may occur and any bugs encountered are
unlikely to be addressed.
.IP \[bu] 2
\f[V]getargs\f[R] supports all the functionality of \f[V]getopts\f[R]
and \f[V]getopt\f[R]
.IP \[bu] 2
The
\f[V]util-linux\f[R] (https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/about/)
specified \f[V]getopt\f[R] is one of a number of commands with the same
name and similar usage, however other versions seem much less capable
(many of which are implementations of the precursor to standard
specified \f[V]getopts\f[R]).
.SS PERFORMANCE
.PP
Performance of \f[V]getargs\f[R] is always likely to be lower than that
of \f[V]getopt\f[R] or \f[V]getopts\f[R] as these utilities provide less
functionality and are invoked as binaries.
However, when used to process arguments for an entire script,
performance is unlikely to be an issue.
.PP
When using \f[V]getargs\f[R] for individual script functions it is
possible that performance MAY become an issue through accumulated costs
(although it is still likely to be far outweighed by other costs).
.PP
In cases where performance of \f[V]getargs\f[R] becomes an issue it is
possible to improve performance with careful usage.
The largest gains can be made by changing the shell being used: for
example, while \f[V]bash\f[R] is a highly competent shell with a many
useful extensions, the less well equipped \f[V]dash\f[R] is
significantly faster for use with \f[V]getargs\f[R].
Similarly the specific implementation of utilities like \f[V]sed\f[R],
or \f[V]grep\f[R] used can have a measurable impact.
.PP
The configuration of \f[V]getargs\f[R] can also make a difference.
The biggest single change is to allow ambiguous options, which will use
\f[V]expr\f[R] (or rarely \f[V]sed\f[R]) rather than \f[V]grep\f[R],
resulting in improved performance.
Disabling other options where they are noted to have a performance
impact will also help (though to a lesser extent).
Additionally, setting config using the provided environment variables
rather than passing as options to \f[V]getargs\f[R] options, can make
minor improvements.
.SS CAVEATS
.PP
The environment in which the library is invoked will dictate limitations
for the library that can not be avoided.
In particular, the command line length limit will impose restrictions on
the length of a single invocation of \f[V]getargs\f[R], though other
limitations may also be problematic.
.PP
Importantly, the command line length limit imposes a limit on the
combined length of \f[I]both\f[R] the SPECIFICATION \f[I]and\f[R] the
ARGUMENTs to process, and may be a particular issue where AUTO-HELP is
used.
.PP
\f[I]For more details see the common suite documentation.\f[R]
.SS EXAMPLE
.PP
Additional examples can be found in the test files for the library.
.PP
   *   *   *   *   *
.PP
A \f[V]chmod\f[R] like utility providing additional options:
.IP
.nf
\f[C]
#!/bin/sh

\&. libgetargs.sh

getargs --unset              --auto-help                                            \[rs]
        -i \[dq]${0}\[dq]                                                                   \[rs]
        -o \[aq]m|mode[:]opt_Mode#The mode to set for all paths.\[aq]                       \[rs]
        -o \[aq]p|path[+]opt_aPaths#One or more paths to edit.\[aq]                         \[rs]
        -o \[aq]R|recursive[-]opt_Recurse#Recurse into any directories.\[aq]                \[rs]
        -o \[aq]L|traverse-links[-]opt_TraverseLinks#Evaluate any links encountered\[aq]    \[rs]
        -o \[aq]single-device[-]opt_SingleDevice#Process only paths on a single device\[aq] \[rs]
        -o \[aq]1|one-device|xdev[-]opt_SingleDevice\[aq]                                   \[rs]
        -p \[aq][\[ha]]opt_Mode,[+]opt_aPaths\[aq]                                              \[rs]
        -- \[dq]$\[at]\[dq] || exit

eval \[dq]set -- ${opt_aPaths+${opt_aPaths}}\[dq]

case ${opt_Recurse:+R} in
R) find ${opt_TraverseLinks+-L}       \[rs]
        \[dq]$\[at]\[dq]                          \[rs]
        ${opt_SingleDevice+-xdev}     \[rs]
        -exec                         \[rs]
          \[aq]chmod\[aq]                     \[rs]
            ${opt_Mode+\[dq]${opt_Mode}\[dq]} \[rs]
            \[aq]{}\[aq] \[aq]+\[aq]
   ;;

*) \[aq]chmod\[aq] ${opt_Mode+\[dq]${opt_Mode}\[dq]} \[dq]$\[at]\[dq] ;;
esac
\f[R]
.fi
.SS COMPARISON
.PP
The following example is adapted from the Wikipedia page for
\f[V]getopts\f[R] (https://wikipedia.org/wiki/Getopts#Examples) and is
implemented for \f[V]getopts\f[R], \f[V]getopt\f[R] and
\f[V]getargs\f[R] to provide a comparison between the available tools.
.PP
   *   *   *   *   *
.PP
\f[B]\f[VB]getopts\f[B]\f[R]
.IP
.nf
\f[C]
#!/bin/bash
VERBOSE=0
ARTICLE=\[aq]\[aq]
LANG=en

while getopts \[aq]:a:l:v\[aq] opt; do
    case $opt in
      (v)   ((VERBOSE++));;
      (a)   ARTICLE=$OPTARG;;
      (l)   LANG=$OPTARG;;
      (:)   # \[dq]optional arguments\[dq] (missing option-argument handling)
            case $OPTARG in
              (a) exit 1;; # error, according to our syntax
              (l) :;;      # acceptable but does nothing
            esac;;
    esac
done

shift \[dq]$OPTIND\[dq]
# remaining is \[dq]$\[at]\[dq]

if ((VERBOSE > 2)); then
  printf \[aq]%s\[rs]n\[aq] \[aq]Non-option arguments:\[aq]
  printf \[aq]%q \[aq] \[dq]${remaining[\[at]]]}\[dq]
fi

if ((VERBOSE > 1)); then
  printf \[aq]Downloading %s:%s\[rs]n\[aq] \[dq]$LANG\[dq] \[dq]$ARTICLE\[dq]
fi

if [[ ! $ARTICLE ]]; then
  printf \[aq]%s\[rs]n\[aq] \[dq]No articles!\[dq]>&2
  exit 1
fi

save_webpage \[dq]https://${LANG}.wikipedia.org/wiki/${ARTICLE}\[dq]
\f[R]
.fi
.PP
   *   *   *   *   *
.PP
\f[B]\f[VB]getopt\f[B]\f[R]
.IP
.nf
\f[C]
#!/bin/bash
VERBOSE=0
ARTICLE=\[aq]\[aq]
LANG=en

ARGS=$(getopt -o \[aq]a:l::v\[aq] --long \[aq]article:,language::,lang::,verbose\[aq] -- \[dq]$\[at]\[dq]) || exit
eval \[dq]set -- $ARGS\[dq]

while true; do
    case $1 in
      (-v|--verbose)
            ((VERBOSE++)); shift;;
      (-a|--article)
            ARTICLE=$2; shift 2;;
      (-l|--lang|--language)
            # handle optional: getopt normalizes it into an empty string
            if [ -n \[dq]$2\[dq] ]; then
              LANG=$2
            fi
            shift 2;;
      (--)  shift; break;;
      (*)   exit 1;;           # error
    esac
done
remaining=(\[dq]$\[at]\[dq])

if ((VERBOSE > 2)); then
  printf \[aq]%s\[rs]n\[aq] \[aq]Non-option arguments:\[aq]
  printf \[aq]%q \[aq] \[dq]${remaining[\[at]]]}\[dq]
fi

if ((VERBOSE > 1)); then
  printf \[aq]Downloading %s:%s\[rs]n\[aq] \[dq]$LANG\[dq] \[dq]$ARTICLE\[dq]
fi

if [[ ! $ARTICLE ]]; then
  printf \[aq]%s\[rs]n\[aq] \[dq]No articles!\[dq]>&2
  exit 1
fi

save_webpage \[dq]https://${LANG}.wikipedia.org/wiki/${ARTICLE}\[dq]
</pre>
\f[R]
.fi
.PP
   *   *   *   *   *
.PP
\f[B]\f[VB]getargs\f[B]\f[R]
.IP
.nf
\f[C]
#!/bin/sh

\&. libgetargs.sh

getargs --unset                     \[rs]
        -o \[aq]verbose|v[:]VERBOSE\[aq]    \[rs]
        -o \[aq]article|a[:]ARTICLE\[aq]    \[rs]
        -o \[aq]language|lang|l[?]LANG\[aq] \[rs]
        -p \[aq][+]REMAINING\[aq]           \[rs]
        -- \[dq]$\[at]\[dq]                     || exit
eval \[dq]set -- ${REMAINING+${REMAINING}}\[dq]
: \[dq]${VERBOSE:=0}\[dq]
: \[dq]${LANG:=en}\[dq]

if ((VERBOSE > 2)); then
   printf \[aq]%s\[rs]n\[aq] \[aq]Non-option arguments:\[aq]
   printf \[aq]%q \[aq] \[dq]$\[at]\[dq]
fi

if ((VERBOSE > 1)); then
   printf \[aq]Downloading %s:%s\[rs]n\[aq] \[dq]$LANG\[dq] \[dq]$ARTICLE\[dq]
fi

if [[ ! $ARTICLE ]]; then
   printf \[aq]%s\[rs]n\[aq] \[dq]No articles!\[dq] \[rs]>&2
   exit 1
fi

save_webpage \[dq]https://${LANG}.wikipedia.org/wiki/${ARTICLE}\[dq]
\f[R]
.fi
.PP
   *   *   *   *   *
.PP
\f[B]\f[VB]getarg\f[B]\f[R]
.IP
.nf
\f[C]
#!/bin/sh

MyArgs=\[dq]$(
   getarg --unset                   \[rs]
        -o \[aq]verbose|v[:]VERBOSE\[aq]    \[rs]
        -o \[aq]article|a[:]ARTICLE\[aq]    \[rs]
        -o \[aq]language|lang|l[?]LANG\[aq] \[rs]
        -p \[aq][+]REMAINING\[aq]           \[rs]
        -- \[dq]$\[at]\[dq]
)\[dq] || exit
eval \[dq]${MyArgs}\[dq]
eval \[dq]set -- ${REMAINING+${REMAINING}}\[dq]
: \[dq]${VERBOSE:=0}\[dq]
: \[dq]${LANG:=en}\[dq]

if ((VERBOSE > 2)); then
   printf \[aq]%s\[rs]n\[aq] \[aq]Non-option arguments:\[aq]
   printf \[aq]%q \[aq] \[dq]$\[at]\[dq]
fi

if ((VERBOSE > 1)); then
   printf \[aq]Downloading %s:%s\[rs]n\[aq] \[dq]$LANG\[dq] \[dq]$ARTICLE\[dq]
fi

if [[ ! $ARTICLE ]]; then
   printf \[aq]%s\[rs]n\[aq] \[dq]No articles!\[dq] \[rs]>&2
   exit 1
fi

save_webpage \[dq]https://${LANG}.wikipedia.org/wiki/${ARTICLE}\[dq]
\f[R]
.fi
.SS SEE ALSO
.PP
betterscripts(7), libarray(7)
.SH NOTES
.SS [1]
.PP
Technically this is incorrect, the output from \f[V]--auto-help\f[R]
\f[I]can\f[R] be stored in a variable, however this value will be lost
when the sub-shell where \f[V]getarg\f[R] was invoked exits.
.SH AUTHORS
BetterScripts (better.scripts\[at]proton.me).
